<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CSLiao&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://liaoguanwang.github.io/"/>
  <updated>2020-03-08T11:35:49.043Z</updated>
  <id>https://liaoguanwang.github.io/</id>
  
  <author>
    <name>csliao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java实现WebSocket聊天室（一）</title>
    <link href="https://liaoguanwang.github.io/%E7%BD%91%E7%BB%9C-Java%E5%AE%9E%E7%8E%B0WebSocket%E8%81%8A%E5%A4%A9%E5%AE%A4%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://liaoguanwang.github.io/%E7%BD%91%E7%BB%9C-Java%E5%AE%9E%E7%8E%B0WebSocket%E8%81%8A%E5%A4%A9%E5%AE%A4%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2020-02-26T15:39:28.000Z</published>
    <updated>2020-03-08T11:35:49.043Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是WebSocket"><a href="#什么是WebSocket" class="headerlink" title="什么是WebSocket"></a>什么是WebSocket</h2><p>WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。</p><p>WebSocket 使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</p><p>现在，很多网站为了实现推送技术，所用的技术都是 Ajax 轮询。轮询是在特定的的时间间隔（如每1秒），由浏览器对服务器发出HTTP请求，然后由服务器返回最新的数据给客户端的浏览器。这种传统的模式带来很明显的缺点，即浏览器需要不断的向服务器发出请求，然而HTTP请求可能包含较长的头部，其中真正有效的数据可能只是很小的一部分，显然这样会浪费很多的带宽等资源。</p><p><strong>WebSocket可以做聊天室，股票实时价格显示等应用</strong></p><p><a href="https://www.runoob.com/wp-content/uploads/2016/03/ws.png" data-fancybox="group" data-caption="https://www.runoob.com/wp-content/uploads/2016/03/ws.png" class="fancybox"><img src="https://www.runoob.com/wp-content/uploads/2016/03/ws.png" alt="https://www.runoob.com/wp-content/uploads/2016/03/ws.png" title="https://www.runoob.com/wp-content/uploads/2016/03/ws.png"></a></p><h2 id="WebSocket和WebSocket-API"><a href="#WebSocket和WebSocket-API" class="headerlink" title="WebSocket和WebSocket API"></a>WebSocket和WebSocket API</h2><p>WebSocket是一种应用协议，而我们常常看到了HTML5 WebSocket是API,不要将其进行混淆。</p><p>广义上的 HTML5 里面包含的是 WebSocket API，并不是 WebSocket。简单的说，可以把 WebSocket 当成 HTTP，WebSocket API 当成 Ajax。</p><h2 id="SpringBoot集成WebSocket的四种实现方式"><a href="#SpringBoot集成WebSocket的四种实现方式" class="headerlink" title="SpringBoot集成WebSocket的四种实现方式"></a>SpringBoot集成WebSocket的四种实现方式</h2><ol><li>原生注解</li><li>Spring封装</li><li>TIO</li><li>STOMP</li></ol><p>参考：<a href="https://blog.csdn.net/u011719271/article/details/102712113" target="_blank" rel="noopener">https://blog.csdn.net/u011719271/article/details/102712113</a></p><p>下面我采用原生注解的方式</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="Maven依赖"><a href="#Maven依赖" class="headerlink" title="Maven依赖"></a>Maven依赖</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="WebSocketConfig"><a href="#WebSocketConfig" class="headerlink" title="WebSocketConfig"></a>WebSocketConfig</h3><p>启用WebSocket的支持</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.server.standard.ServerEndpointExporter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 开启WebSocket支持</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServerEndpointExporter <span class="title">serverEndpointExporter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServerEndpointExporter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="WebSocketServer"><a href="#WebSocketServer" class="headerlink" title="WebSocketServer"></a>WebSocketServer</h3><p>WebSocket是类似客户端服务端的形式(采用ws协议)，WebSocketServer其实就相当于一个ws协议的Controller直接@ServerEndpoint(“/websocket”)、@Component启用即可，这里采用Spring原生注解对的方式，然后在里面实现@OnOpen,@onClose,@onMessage等方法</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ServerEndpoint</span>(<span class="string">"/websocket/&#123;id&#125;"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(WebSocketServer.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态变量，用来记录当前在线连接数。应该把它设计成线程安全的。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> onlineCount = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//concurrent包的线程安全Set，用来存放每个客户端对应的MyWebSocket对象。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ConcurrentHashMap&lt;String, WebSocketServer&gt; webSocketMap = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">//与某个客户端的连接会话，需要通过它来给客户端发送数据</span></span><br><span class="line">    <span class="keyword">private</span> Session session;</span><br><span class="line">    <span class="comment">//接收sid</span></span><br><span class="line">    <span class="keyword">private</span> String id=<span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接建立成功调用的方法*/</span></span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOpen</span><span class="params">(Session session, @PathParam(<span class="string">"id"</span>)</span>String id) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.session = session;</span><br><span class="line">        webSocketMap.put(id, <span class="keyword">this</span>);</span><br><span class="line">        addOnlineCount();           <span class="comment">//在线数加1</span></span><br><span class="line">        logger.info(<span class="string">"有新窗口开始监听:"</span> + id + <span class="string">",当前在线人数为"</span> + getOnlineCount());</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sendMessage(<span class="string">"连接成功"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            logger.error(<span class="string">"websocket IO异常"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接关闭调用的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClose</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        webSocketMap.remove(id);  <span class="comment">//从Map中删除</span></span><br><span class="line">        subOnlineCount();           <span class="comment">//在线数减1</span></span><br><span class="line">        logger.info(<span class="string">"有一连接关闭！当前在线人数为"</span> + getOnlineCount());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 收到客户端消息后调用的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 客户端发送过来的消息*/</span></span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(String message, Session session)</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"收到来自窗口"</span> + id + <span class="string">"的信息:"</span> + message);</span><br><span class="line">        Collection&lt;WebSocketServer&gt; values = webSocketMap.values();</span><br><span class="line">        <span class="comment">//群发消息</span></span><br><span class="line">        <span class="keyword">for</span> (WebSocketServer item : values) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                item.sendMessage(message);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> error</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnError</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Session session, Throwable error)</span> </span>&#123;</span><br><span class="line">        logger.error(<span class="string">"发生错误"</span>);</span><br><span class="line">        error.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现服务器主动推送</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String message)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.session.getBasicRemote().sendText(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 群发自定义消息</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sendInfo</span><span class="params">(String message, @PathParam(<span class="string">"id"</span>)</span> String id) <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"推送消息到窗口"</span>+id+<span class="string">"，推送内容:"</span>+message);</span><br><span class="line">        Collection&lt;WebSocketServer&gt; values = webSocketMap.values();</span><br><span class="line">        <span class="keyword">for</span> (WebSocketServer item : values) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//这里可以设定只推送给这个id的，为null则全部推送</span></span><br><span class="line">                <span class="keyword">if</span>(id == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    item.sendMessage(message);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(item.id.equals(id))&#123;</span><br><span class="line">                    item.sendMessage(message);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">getOnlineCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> onlineCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">addOnlineCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        WebSocketServer.onlineCount++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">subOnlineCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        WebSocketServer.onlineCount--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>WebSocket<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">WebSocketTest</span><span class="params">()</span></span></span></span><br><span class="line">        &#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (<span class="string">"WebSocket"</span> <span class="keyword">in</span> <span class="built_in">window</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line"><span class="actionscript">                alert(<span class="string">"您的浏览器支持 WebSocket!"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="comment">// 打开一个 web socket</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">"ws://127.0.0.1:8081/websocket/csliao"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                ws.onopen = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span></span><br><span class="line">                &#123;</span><br><span class="line"><span class="actionscript">                    <span class="comment">// Web Socket 已连接上，使用 send() 方法发送数据</span></span></span><br><span class="line"><span class="actionscript">                    ws.send(<span class="string">"发送数据"</span>);</span></span><br><span class="line"><span class="actionscript">                    alert(<span class="string">"数据发送中..."</span>);</span></span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">                ws.onmessage = <span class="function"><span class="keyword">function</span> <span class="params">(evt)</span></span></span></span><br><span class="line">                &#123;</span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> received_msg = evt.data;</span></span><br><span class="line">                    alert(received_msg)</span><br><span class="line"><span class="actionscript">                    alert(<span class="string">"数据已接收..."</span>);</span></span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">                ws.onclose = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span></span><br><span class="line">                &#123;</span><br><span class="line"><span class="actionscript">                    <span class="comment">// 关闭 websocket</span></span></span><br><span class="line"><span class="actionscript">                    alert(<span class="string">"连接已关闭..."</span>);</span></span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="keyword">else</span></span></span><br><span class="line">            &#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 浏览器不支持 WebSocket</span></span></span><br><span class="line"><span class="actionscript">                alert(<span class="string">"您的浏览器不支持 WebSocket!"</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"sse"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:WebSocketTest()"</span>&gt;</span>运行 WebSocket<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>参考资料：</p><ul><li><a href="https://www.runoob.com/html/html5-websocket.html" target="_blank" rel="noopener">https://www.runoob.com/html/html5-websocket.html</a></li><li><a href="https://juejin.im/post/5d968ec05188252d3a6a643a#heading-1" target="_blank" rel="noopener">https://juejin.im/post/5d968ec05188252d3a6a643a#heading-1</a></li></ul><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是WebSocket&quot;&gt;&lt;a href=&quot;#什么是WebSocket&quot; class=&quot;headerlink&quot; title=&quot;什么是WebSocket&quot;&gt;&lt;/a&gt;什么是WebSocket&lt;/h2&gt;&lt;p&gt;WebSocket 是 HTML5 开始提供的一种在单个 T
      
    
    </summary>
    
    
      <category term="网络" scheme="https://liaoguanwang.github.io/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="网络协议" scheme="https://liaoguanwang.github.io/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"/>
    
      <category term="websocket" scheme="https://liaoguanwang.github.io/tags/websocket/"/>
    
  </entry>
  
  <entry>
    <title>【BUG】The remote endpoint was in state [TEXT_PARTIAL_WRITING] which is an invalid stat</title>
    <link href="https://liaoguanwang.github.io/BUG-The-remote-endpoint-was-in-state-TEXT-PARTIAL-WRITING-which-is-an-invalid-stat/"/>
    <id>https://liaoguanwang.github.io/BUG-The-remote-endpoint-was-in-state-TEXT-PARTIAL-WRITING-which-is-an-invalid-stat/</id>
    <published>2020-02-10T15:59:05.000Z</published>
    <updated>2020-03-10T16:17:11.364Z</updated>
    
    <content type="html"><![CDATA[<h2 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h2><p>Caused by: java.lang.IllegalStateException: The remote endpoint was in state [TEXT_PARTIAL_WRITING] which is an invalid state for called method</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>加锁，保证一个session在某个时刻不会被调用多次</p><p>参考：<a href="https://blog.csdn.net/qq_20641565/article/details/80857408" target="_blank" rel="noopener">https://blog.csdn.net/qq_20641565/article/details/80857408</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;报错信息&quot;&gt;&lt;a href=&quot;#报错信息&quot; class=&quot;headerlink&quot; title=&quot;报错信息&quot;&gt;&lt;/a&gt;报错信息&lt;/h2&gt;&lt;p&gt;Caused by: java.lang.IllegalStateException: The remote endpoin
      
    
    </summary>
    
    
      <category term="BUG" scheme="https://liaoguanwang.github.io/categories/BUG/"/>
    
    
      <category term="多线程" scheme="https://liaoguanwang.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="WebSocket" scheme="https://liaoguanwang.github.io/tags/WebSocket/"/>
    
      <category term="Session" scheme="https://liaoguanwang.github.io/tags/Session/"/>
    
  </entry>
  
  <entry>
    <title>Windows建立和删除nul等特殊文件夹</title>
    <link href="https://liaoguanwang.github.io/Tool-Windows%E5%BB%BA%E7%AB%8B%E5%92%8C%E5%88%A0%E9%99%A4nul%E7%AD%89%E7%89%B9%E6%AE%8A%E6%96%87%E4%BB%B6%E5%A4%B9/"/>
    <id>https://liaoguanwang.github.io/Tool-Windows%E5%BB%BA%E7%AB%8B%E5%92%8C%E5%88%A0%E9%99%A4nul%E7%AD%89%E7%89%B9%E6%AE%8A%E6%96%87%E4%BB%B6%E5%A4%B9/</id>
    <published>2020-01-09T16:09:52.000Z</published>
    <updated>2020-03-10T16:49:55.107Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Windows设备名称"><a href="#Windows设备名称" class="headerlink" title="Windows设备名称"></a>Windows设备名称</h2><p>“aux”,”com1”,”com2”,”prn”,”con”,”nul”等，因为这些名字都属于设备名称，等价于一个 DOS 设备，如果我们把文件命名为这些名字，Windows 就会误以为发生重名，所以会提示“不能创建同名的文件”等等。</p><h2 id="建立设备名文件夹"><a href="#建立设备名文件夹" class="headerlink" title="建立设备名文件夹"></a>建立设备名文件夹</h2><p>命令提示符下执行”md C:\nul\“，就在C盘建立一个名叫nul的文件夹。<br>此文件夹虽然可以访问，也可以建立子文件夹，但无法删除，因为Windows不允许以这种方式删除。在系统看来，nul文件夹就是个设备</p><h2 id="删除设备名文件夹"><a href="#删除设备名文件夹" class="headerlink" title="删除设备名文件夹"></a>删除设备名文件夹</h2><p>按照完整的UNC路径格式，就是网上邻居的路径格式，正确输入文件路径和文件名即可。<br>比如删除C盘下的nul文件夹，在命令提示符下执行：</p><ul><li>rd /s \.\C:\nul<br>rd 是命令提示符删除文件夹的命令，/s 参数表示从所有子目录删除指定文件</li><li>del \.\C:\nul</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Windows设备名称&quot;&gt;&lt;a href=&quot;#Windows设备名称&quot; class=&quot;headerlink&quot; title=&quot;Windows设备名称&quot;&gt;&lt;/a&gt;Windows设备名称&lt;/h2&gt;&lt;p&gt;“aux”,”com1”,”com2”,”prn”,”con”,”n
      
    
    </summary>
    
    
      <category term="Tool" scheme="https://liaoguanwang.github.io/categories/Tool/"/>
    
    
      <category term="CMD" scheme="https://liaoguanwang.github.io/tags/CMD/"/>
    
      <category term="Windows" scheme="https://liaoguanwang.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Git遇坑总结</title>
    <link href="https://liaoguanwang.github.io/Tool-Git%E9%81%87%E5%9D%91%E6%80%BB%E7%BB%93/"/>
    <id>https://liaoguanwang.github.io/Tool-Git%E9%81%87%E5%9D%91%E6%80%BB%E7%BB%93/</id>
    <published>2019-09-24T16:28:58.000Z</published>
    <updated>2020-03-09T16:50:05.344Z</updated>
    
    <content type="html"><![CDATA[<h2 id="【报错信息】fatal-No-configured-push-destination"><a href="#【报错信息】fatal-No-configured-push-destination" class="headerlink" title="【报错信息】fatal: No configured push destination."></a>【报错信息】fatal: No configured push destination.</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fatal: No configured push destination.</span><br><span class="line">Either specify the URL from the command-line or configure a remote repository using</span><br></pre></td></tr></table></figure></div><p>解决方法</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">这个时候第一次push需要网址：</span><br><span class="line">$ git add --all</span><br><span class="line">$ git commit -m &quot;提交信息&quot;</span><br><span class="line">$ git remote add origin &apos;远程仓库url&apos;</span><br><span class="line">$ git push -u origin 对应远程分支名</span><br><span class="line"> </span><br><span class="line">然后下一次就不用那么麻烦了，直接：</span><br><span class="line">$ git add --all</span><br><span class="line">$ git commit -m &quot;信息&quot;</span><br><span class="line">$ git pus</span><br></pre></td></tr></table></figure></div><p>参考：<a href="https://blog.csdn.net/COCOLI_BK/article/details/97921497" target="_blank" rel="noopener">https://blog.csdn.net/COCOLI_BK/article/details/97921497</a></p><h2 id="【报错信息】error-failed-to-push-some-refs-to-‘git-github-com-xxx-git’"><a href="#【报错信息】error-failed-to-push-some-refs-to-‘git-github-com-xxx-git’" class="headerlink" title="【报错信息】error: failed to push some refs to ‘git@github.com:xxx.git’"></a>【报错信息】error: failed to push some refs to ‘git@github.com:xxx.git’</h2><p>1、在使用git 对源代码进行push到gitHub时可能会出错</p><p>2、出现错误的主要原因是github中的README.md文件不在本地代码目录中</p><p>3、可以通过如下命令进行代码合并【注：pull=fetch+merge]</p><p>git pull –rebase origin master</p><p>4、执行上面代码后可以看到本地代码库中多了README.md文件</p><p>5、此时再执行语句 git push 即可完成代码上传到github</p><p>参考：</p><ul><li><a href="https://blog.csdn.net/ever69/article/details/97565768" target="_blank" rel="noopener">https://blog.csdn.net/ever69/article/details/97565768</a></li><li><a href="https://www.cnblogs.com/Tohold/p/9774144.html" target="_blank" rel="noopener">https://www.cnblogs.com/Tohold/p/9774144.html</a></li></ul><h2 id="Git-rebase"><a href="#Git-rebase" class="headerlink" title="Git rebase"></a>Git rebase</h2><ul><li><p><a href="https://www.jianshu.com/p/f7ed3dd0d2d8" target="_blank" rel="noopener">https://www.jianshu.com/p/f7ed3dd0d2d8</a></p></li><li><p><a href="https://www.centos.bz/2018/01/%E4%BB%8E%E6%92%A4%E9%94%80-rebase-%E8%B0%88%E8%B0%88-git-%E5%8E%9F%E7%90%86/" target="_blank" rel="noopener">https://www.centos.bz/2018/01/%E4%BB%8E%E6%92%A4%E9%94%80-rebase-%E8%B0%88%E8%B0%88-git-%E5%8E%9F%E7%90%86/</a></p></li></ul><h2 id="【提示信息】shell显示master-REBASE-1-1"><a href="#【提示信息】shell显示master-REBASE-1-1" class="headerlink" title="【提示信息】shell显示master|REBASE 1/1)"></a>【提示信息】shell显示master|REBASE 1/1)</h2><p>解决方法： git rebase –abort</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">If git rebase --continue | --skip | --abort still do not work:</span><br><span class="line"></span><br><span class="line">You might try to discard your local commit one by one, then use git status to make sure your local commit are up-to-date with remote branch.</span><br><span class="line"></span><br><span class="line">git reset --hard HEAD~1 </span><br><span class="line">NOTE: git reset --hard will discard your work, use it only if you know what you are doing!!</span><br></pre></td></tr></table></figure></div><p>参考:</p><ul><li><a href="https://blog.csdn.net/qq_42469247/article/details/88901756" target="_blank" rel="noopener">https://blog.csdn.net/qq_42469247/article/details/88901756</a></li><li><a href="https://stackoverflow.com/questions/18292578/what-does-git-masterrebase-1-1-mean-how-do-i-get-rid-of-it" target="_blank" rel="noopener">https://stackoverflow.com/questions/18292578/what-does-git-masterrebase-1-1-mean-how-do-i-get-rid-of-it</a></li></ul><h2 id="【报错信心】fatal-refusing-to-merge-unrelated-histories"><a href="#【报错信心】fatal-refusing-to-merge-unrelated-histories" class="headerlink" title="【报错信心】fatal: refusing to merge unrelated histories"></a>【报错信心】fatal: refusing to merge unrelated histories</h2><p>参考：<a href="https://blog.csdn.net/u012145252/article/details/80628451" target="_blank" rel="noopener">https://blog.csdn.net/u012145252/article/details/80628451</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;【报错信息】fatal-No-configured-push-destination&quot;&gt;&lt;a href=&quot;#【报错信息】fatal-No-configured-push-destination&quot; class=&quot;headerlink&quot; title=&quot;【报错信息】fa
      
    
    </summary>
    
    
      <category term="Tool" scheme="https://liaoguanwang.github.io/categories/Tool/"/>
    
    
      <category term="Git" scheme="https://liaoguanwang.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>CMD命令</title>
    <link href="https://liaoguanwang.github.io/Tool-CMD%E5%91%BD%E4%BB%A4/"/>
    <id>https://liaoguanwang.github.io/Tool-CMD%E5%91%BD%E4%BB%A4/</id>
    <published>2019-09-20T15:45:45.000Z</published>
    <updated>2020-03-09T16:31:38.861Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-代码补全"><a href="#1-代码补全" class="headerlink" title="1.代码补全"></a>1.代码补全</h3><ol><li><p>win+r打输入regedit 打开注册表</p><a href="https://img2018.cnblogs.com/blog/1351916/201907/1351916-20190730230515541-1255840934.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img src="https://img2018.cnblogs.com/blog/1351916/201907/1351916-20190730230515541-1255840934.png" heigh="200" width="300"></a></li><li><p>进入HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Command Processor\CompletionChar，双击CompletionChar， 将值改为9，选择十进制，点击确定</p><a href="https://img2018.cnblogs.com/blog/1351916/201907/1351916-20190730232124698-280245012.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img src="https://img2018.cnblogs.com/blog/1351916/201907/1351916-20190730232124698-280245012.png" heigh="490" width="630"></a></li><li><p>以后运行CMD的时候 输入首字母按住 TAB键就能自动补全输入的命令了。</p></li></ol><p>未完待续…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-代码补全&quot;&gt;&lt;a href=&quot;#1-代码补全&quot; class=&quot;headerlink&quot; title=&quot;1.代码补全&quot;&gt;&lt;/a&gt;1.代码补全&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;win+r打输入regedit 打开注册表&lt;/p&gt;
&lt;a href=&quot;https://im
      
    
    </summary>
    
    
      <category term="Tool" scheme="https://liaoguanwang.github.io/categories/Tool/"/>
    
    
      <category term="命令" scheme="https://liaoguanwang.github.io/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>linux命令总结</title>
    <link href="https://liaoguanwang.github.io/Linux-linux%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
    <id>https://liaoguanwang.github.io/Linux-linux%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/</id>
    <published>2019-09-18T15:58:51.000Z</published>
    <updated>2020-03-08T11:35:48.980Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>lfconfig -a<br>查看虚拟机的IP地址、子网掩码、MAC地址</p></li><li><p>netstat -rnv<br>查看当前路由配置</p></li><li><p>su -root<br>进入root用户目录</p></li><li><p>ps -ef|grep processname<br>查找名字processname的进程（等价于windows任务管理器）<br>grep表示筛选，grep processname 就是查看进程</p></li><li><p>lsof -i | egrep port<br>查看端口port的监听情况</p></li><li><p>vim file 打开文件<br>i 插入<br>Esc 退出插入模式<br>:q 退出<br>:q! 强制退出<br>:wq! 强制保存退出<br>/word 从上至下搜索word<br>?word 从下到上搜索Word</p></li><li><p>kill -9 PID<br>结束进程<br>假设要结束xx进程，可通过ps -ef|grep xx查看它的PID，再使用kill -9 PID。</p></li><li><p>./xxx.sh<br>启动服务（等价于windows启动bat）</p></li><li><p>df -h<br>查看硬盘使用情况</p></li><li><p>talif<br>实时取日志 talif xxx.log<br>talif -n 20 filename : 显示filename最后20行</p></li><li><p>history<br>linux历史命令<br>history -c - : 历史命令的清楚</p></li><li><p>cat 查看文件<br>cat xxx.log | grep xxx关键字<br>cat -n 文件名 : 根据行号输出</p></li><li><p>cp<br>cp 原来目标路径/文件名 目标路径名<br>例子: cp /home/test.txt /home/test/test.txt<br>cp -R 源目录/* 目的目录<br>使用-R实现递归，即所有子目录中的文件与目录均拷贝<br>注意：如果dir2目录不存在，则可以直接使用<br>cp -r dir1 dir2<br>如果dir2目录已存在，则需要cp -r dir1 dir2</p></li><li><p>nohup<br>用法：nohup Command [ Arg … ] [　&amp; ]<br>nohup 是 no hang up 的缩写，就是不挂断的意思。<br>nohup 命令运行由 Command参数和任何相关的 Arg参数指定的命令，忽略所有挂断（SIGHUP）信号。在注销后使用 nohup 命令运行后台中的程序。要运行后台中的 nohup 命令，添加 &amp; （ 表示“and”的符号）到命令的尾部。<br>详细：<a href="https://www.cnblogs.com/jinxiao-pu/p/9131057.html" target="_blank" rel="noopener">https://www.cnblogs.com/jinxiao-pu/p/9131057.html</a></p></li></ul><h2 id="find命令"><a href="#find命令" class="headerlink" title="find命令"></a>find命令</h2><ul><li><p>列出当前目录及子目录所有文件和文件夹<br>find .</p></li><li><p>在指定目录（及其子目录）下查找指定格式文件名<br>find 指定目录 -name “*.txt”</p></li><li><p>在指定目录（及其子目录）下查找指定格式文件名，忽略大小写<br>find 指定目录 -inname “*.txt”</p></li><li><p>当前目录及子目录下查找所有以.txt和.pdf结尾的文件<br>find . -name “.txt” -o -name “*.pdf”</p></li><li><p>匹配文件路径或者文件<br>find /usr/ -path “<em>local</em>“</p></li><li><p>基于正则表达式匹配文件路径<br>find . -regex “.*(.txt|.pdf)$”</p></li><li><p>基于正则表达式匹配文件路径，忽略大小写<br>find . -iregex “.*(.txt|.pdf)$”</p></li><li><p>反向查找。找到当前目录不以.txt结尾的文件<br>find . !-name “*.txt”</p></li><li><p>根据文件类型搜索<br>find . -type 类型参数</p><ul><li>类型参数</li><li>f 普通文件</li><li>l 符号链接</li><li>d 目录</li><li>c 字符设备</li><li>b 块设备</li><li>s 套接字</li><li>p FIFO  </li></ul></li><li><p>基于目录深度搜索</p><ul><li>向下最大深度限制3<br>find . -maxdepth3 type f</li><li>搜索距离当前目录至少2个子目录的所有文件<br>find . -mindepth2 -type f</li></ul></li><li><p>根据文件时间戳搜索<br>find . -type f 时间戳</p><ul><li>访问时间（-atime/天，-amin/分钟）<br>用户最近一次访问时间</li><li>修改时间（-mtime/天，-mmin/分钟）<br>文件最后一次修改时间</li><li>变化时间（-ctime/天，-cmin/分钟）<br>文件数据元（例如权限等）最后一次修改时间</li><li>搜索7天内被访问过的所有文件<br>find . -type f -atime-7</li><li>搜索超过7天被访问过的所有文件<br>find . -type f -atime+7</li></ul></li><li><p>根据文件大小匹配<br>find . type f-size 文件大小单元</p><ul><li><p>文件大小单元</p></li><li><p>b 块（512字节）</p></li><li><p>c 字节</p></li><li><p>w 字（2字节）</p></li><li><p>k 千字节</p></li><li><p>M 兆字节</p></li><li><p>G 吉字节</p></li><li><p>搜索大于10KB的文件<br>find . -type f -size+10k</p></li></ul></li><li><p>删除匹配文件</p><ul><li>删除当前目录下所有.txt文件<br>find . -type f -name “.txt” -delete</li></ul></li><li><p>根据文件权限/所有权匹配</p><ul><li>当前目录下搜索出权限为777的文件<br>find . -type f -perm 777</li><li>找出当前目录用户tom拥有的所有文件<br>find . -type f -user tom</li><li>找出当前目录用户组sunk拥有的所有文件<br>find . -type f -group sunk</li></ul></li><li><p>借助-exec选项与其他命令结合使用</p><ul><li>查找当前目录下所有.txt文件并把他们拼接起来写入all.txt文件中<br>find . -type f -name “*.txt” -exec cat {};&gt; all.txt</li><li>将30天前log文件移动到old目录中<br>find .type f -mtime +30 -name “*.log” -exec cp {} old;</li><li>找出当前目录下所有.txt并以”File:文件名”的形式打印出来<br>find . type f -name “*.txt” -exec printf “File:%s” {};</li></ul></li></ul><h2 id="grep命令"><a href="#grep命令" class="headerlink" title="grep命令"></a>grep命令</h2><ul><li><p>从单个文件中查找指定字符串<br>grep “this” demp_file</p></li><li><p>从多个文件中查找指定的字符串<br>grep “this” demo_*</p></li><li><p>忽略大小写使用grep -i<br>grep -i “the” demo_file</p></li><li><p>在文件中匹配正则表达式<br>grep -w “is” demo_file</p></li><li><p>用grep -A，-B，-C来查看after/before/aroud行<br>grep -A 3 -i “example” demo_file<br>grep -B 2”single WORD” demo_file<br>grep -C 2”Example” demo_file</p></li><li><p>用grep -r来搜索所有的文件及子目录<br>grep -r “this” *</p></li><li><p>用grep -v来显示不匹配的项<br>grep -v “go” demo_file</p></li><li><p>用grep -c来计算匹配的数量<br>grep -c “go” demo_file</p></li><li><p>计算匹配的模式数<br>grep -c this demo_file</p></li><li><p>计算不匹配的模式数<br>grep -v -c this demo_file</p></li><li><p>使用grep -l显示匹配的文件名<br>grep -l this demo_*</p></li><li><p>只显示匹配的字符串<br>grep -o “is.*line” demo_file</p></li><li><p>显示匹配的字节位置<br>grep -o -b “b” test_file</p></li><li><p>用grep -n显示行数<br>显示关键字”this”在文件中的所在行数<br>grep -n “this” demo_file</p></li><li><p>grep -E 匹配多个</p></li></ul><h2 id="ps命令"><a href="#ps命令" class="headerlink" title="ps命令"></a>ps命令</h2><ul><li><p>ps -A<br>显示所有进程</p></li><li><p>ps -u root<br>显示指定用户信息</p></li><li><p>ps -ef<br>显示所有进程信息，连同命令行</p></li><li><p>ps -ef | grep ssh<br>ps与grep常用组合，查找特定进程</p></li><li><p>ps -l<br>将目前属于自己注册登录的PID与相关信息列展示出来</p></li><li><p>ps aux<br>列出目前所有的正在内存中的程序</p></li><li><p>ps -axjf<br>列出类似程序树的程序显示</p></li><li><p>ps aux | egrep ‘(cron|syslog)’<br>找出与cron和syslog这两个服务有关的PID号码</p></li><li><p>ps -aux&gt; ps001.txt<br>把所有进程显示出来，并输出到ps001.txt</p></li><li><p>ps -opid,ppid,pgrp,session,tpgid,comm<br>输出指定字段</p></li></ul><p>未完待续…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;lfconfig -a&lt;br&gt;查看虚拟机的IP地址、子网掩码、MAC地址&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;netstat -rnv&lt;br&gt;查看当前路由配置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;su -root&lt;br&gt;进入root用户目录&lt;/p&gt;
&lt;/li&gt;
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://liaoguanwang.github.io/categories/Linux/"/>
    
    
      <category term="命令" scheme="https://liaoguanwang.github.io/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB学习笔记</title>
    <link href="https://liaoguanwang.github.io/DB-MongoDB-MongoDB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://liaoguanwang.github.io/DB-MongoDB-MongoDB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2019-09-16T15:51:14.000Z</published>
    <updated>2020-03-08T11:35:48.993Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MongoDB简介"><a href="#MongoDB简介" class="headerlink" title="MongoDB简介"></a>MongoDB简介</h2><hr><p>MongoDB是一个基于分布式文件存储的数据库。由C++语言编写。旨在为WEB应用提供可扩展的高性能数据存储解决方案。</p><p>MongoDB是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。它支持的数据结构非常松散，是类似json的bson格式，因此可以存储比较复杂的数据类型。Mongo最大的特点是它支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立索引。</p><h2 id="MongoD安装与设置"><a href="#MongoD安装与设置" class="headerlink" title="MongoD安装与设置"></a>MongoD安装与设置</h2><hr><h3 id="1-MongoDB安装"><a href="#1-MongoDB安装" class="headerlink" title="1.MongoDB安装"></a>1.MongoDB安装</h3><p>官网下载：<a href="https://www.mongodb.com/download-center/enterprise" target="_blank" rel="noopener">https://www.mongodb.com/download-center/enterprise</a></p><a href="https://img2018.cnblogs.com/blog/1351916/201905/1351916-20190515000444100-1593660947.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img src="https://img2018.cnblogs.com/blog/1351916/201905/1351916-20190515000444100-1593660947.png" height="375" width="713"></a><h3 id="2-设置环境变量"><a href="#2-设置环境变量" class="headerlink" title="2.设置环境变量"></a>2.设置环境变量</h3><a href="https://img2018.cnblogs.com/blog/1351916/201905/1351916-20190515005313068-1730917808.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img src="https://img2018.cnblogs.com/blog/1351916/201905/1351916-20190515005313068-1730917808.png" height="390" width="413"></a><h3 id="3-启动配置"><a href="#3-启动配置" class="headerlink" title="3.启动配置"></a>3.启动配置</h3><ol><li>Windows下打开dos窗口，输入”mongod”，发现启动失败，报错:exception in initAndListen: NonExistentPath: Data directory C:\data\db\ not found., terminating。意思是没有在指定位置找到用来存放数据的目录。<a href="https://img2018.cnblogs.com/blog/1351916/201905/1351916-20190515234223262-616990280.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img src="https://img2018.cnblogs.com/blog/1351916/201905/1351916-20190515234223262-616990280.png" height="1500" width="643"></a>解决方法：建立C:\data\db目录</li></ol><p>— 分割线 —<br>参考：<a href="https://www.jianshu.com/p/7f3cb2c7806b" target="_blank" rel="noopener">windows下安装MongoDB</a></p><ol start="2"><li>指定MongoDB数据库的目录<br>参考：<a href="https://www.cnblogs.com/ilovewindy/p/3736072.html" target="_blank" rel="noopener">MongoDB：更改数据库位置（Windows）</a> </li></ol><p>— 分割线 —<br>如果不想数据库目录存在”C:\data\db”，也可以存放在其他地方，这里我的MongoDB的数据库安装在”D:\Program Files\mongodb-4.0.9\data”<br>首先dos窗口先切换到MongoDB安装的bin目录下<br><a href="https://img2018.cnblogs.com/blog/1351916/201905/1351916-20190515235048086-89673912.png" data-fancybox="group" data-caption class="fancybox"><img src="https://img2018.cnblogs.com/blog/1351916/201905/1351916-20190515235048086-89673912.png" alt title></a><br>然后输入mongodb.exe –dbpath “D:\Program Files\mongodb-4.0.9\data”<br><a href="https://img2018.cnblogs.com/blog/1351916/201905/1351916-20190515235124201-2018153789.png" data-fancybox="group" data-caption class="fancybox"><img src="https://img2018.cnblogs.com/blog/1351916/201905/1351916-20190515235124201-2018153789.png" alt title></a></p><ol start="3"><li><p>通过配置文件指定MongoDB数据库的目录</p><a href="https://img2018.cnblogs.com/blog/1351916/201905/1351916-20190516001430489-1153028170.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img src="https://img2018.cnblogs.com/blog/1351916/201905/1351916-20190516001430489-1153028170.png" height="1100" width="600"></a>在dos窗口输入命令mongod --config "D:\Program Files\mongodb-4.0.9\mongod.cfg" --install</li><li><p>启动MongoDB服务端<br>命令：mongod<br>注意：启动端口默认为27017，建议更改端口和添加用户密码。</p><a href="https://img2018.cnblogs.com/blog/1351916/201905/1351916-20190522234747328-1957429489.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img src="https://img2018.cnblogs.com/blog/1351916/201905/1351916-20190522234747328-1957429489.png" height="270" width="1070"></a></li><li><p>连接MongoDB<br>命令：mongo</p><a href="https://img2018.cnblogs.com/blog/1351916/201905/1351916-20190523005225528-1762146626.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img src="https://img2018.cnblogs.com/blog/1351916/201905/1351916-20190523005225528-1762146626.png" height="290" width="930"></a></li></ol><h2 id="MongoDB命令"><a href="#MongoDB命令" class="headerlink" title="MongoDB命令"></a>MongoDB命令</h2><hr><h3 id="1-MongoDB启动"><a href="#1-MongoDB启动" class="headerlink" title="1.MongoDB启动"></a>1.MongoDB启动</h3><ul><li>命令行（终端启动）启动命令<ul><li>mongod:启动服务端</li><li>mongo:启动客户端</li></ul></li></ul><h3 id="2-操作数据库命令"><a href="#2-操作数据库命令" class="headerlink" title="2.操作数据库命令"></a>2.操作数据库命令</h3><ul><li><p>查看当前的数据：<br>db | db.getName()</p></li><li><p>查看所有的数据库：<br>show dbs | show databases</p></li><li><p>切换数据库：<br>use db_name</p></li><li><p>删除当前数据库：<br>db.dropDatabases()，如果没有选择任何数据库，那么它会删除默认的”test”数据库</p></li><li><p>显示数据库状态：<br>db.stats()</p></li><li><p>显示数据库版本：<br>db.version()</p></li><li><p>查看当前数据库的链接机器地址：<br>db.getMongo()</p></li><li><p>删除数据库：<br>db.dropDatabase()</p></li></ul><h3 id="3-操作集合的命令"><a href="#3-操作集合的命令" class="headerlink" title="3.操作集合的命令"></a>3.操作集合的命令</h3><ul><li><p>查看集合：<br>show collections</p></li><li><p>删除集合：<br>db.collection_name.drop() </p></li></ul><h3 id="4-操作用户命令"><a href="#4-操作用户命令" class="headerlink" title="4.操作用户命令"></a>4.操作用户命令</h3><ul><li><p>查看当前库下的账户：<br>show users </p></li><li><p>查看全局所有账户：<br>db.system.users.find().pretty()</p></li><li><p>添加用户：</p></li></ul><p>1.添加超级用户<br>切换到admin数据，use admin<br>执行添加语句：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.createUser(</span><br><span class="line">    &#123;</span><br><span class="line">        user:<span class="string">"username"</span>,</span><br><span class="line">        pwd:<span class="string">"password"</span>,</span><br><span class="line">        roles:[</span><br><span class="line">            &#123;role:<span class="string">"root"</span>, db:<span class="string">"admin"</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div><p>2.添加普通用户</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">db.createUser(</span><br><span class="line">    &#123;</span><br><span class="line">        user:<span class="string">"username"</span>,</span><br><span class="line">        pwd:<span class="string">"password"</span>,</span><br><span class="line">        roles:[</span><br><span class="line">            &#123;role:<span class="string">"read"</span>, db:<span class="string">"xxxx"</span>&#125;,</span><br><span class="line">            &#123;role:<span class="string">"readWrite"</span>, db:<span class="string">"test"</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">格式<span class="number">1</span></span><br><span class="line">  db.createUser(</span><br><span class="line">&#123;</span><br><span class="line">  user:<span class="string">"test"</span>,</span><br><span class="line">  pwd:<span class="string">"123456"</span>,</span><br><span class="line">  roles:[&#123;role:<span class="string">"readWrite"</span>, db:<span class="string">"test"</span>&#125;]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">格式<span class="number">2</span></span><br><span class="line">db.createUser(&#123;user: <span class="string">"test"</span>, pwd: <span class="string">"123456"</span>, roles: [&#123; role: <span class="string">"readWrite"</span>, db: <span class="string">"test"</span> &#125;]&#125;)</span><br></pre></td></tr></table></figure></div><ul><li>修改用户密码：</li></ul><p>1.db.changeUserPassword(“user_name”,”new_password”);<br>2.db.updateUser(“user_name”,{pwd:”new_password”})；</p><ul><li>修改用户权限</li></ul><p>1.完全替换之前权限<br>db.updateUser(“user_name”,{roles:[ {role:”read”,db:”testDB”} ]})<br>注：updateuser它是完全替换之前的值，如果要新增或添加roles而不是代替它，则使用方法： db.grantRolesToUser() 和 db.revokeRolesFromUser(）<br>—分割线—<br>2.添加权限<br>db.grantRolesToUser(“user_name”, [{role:”readWrite”, db:”testDB”},{role:”read”, db:”testDB”}])<br>—分割线—<br>3.删除权限<br>db.revokeRolesFromUser(“user_name”,[{role:”read”, db:”testDB”}])</p><ul><li><p>用户认证<br>切换到数据库<br>use db_name<br>认证<br>db.auth(“user_name”,”password”)</p></li><li><p>删除用户：<br>切换到用户授权的db<br>use db_name<br>执行删除操作<br>db.removeUser(“user_name”) | db.dropUser(“user_name”)</p></li><li><p>–分割线—<br>参考：<br><a href="https://www.cnblogs.com/jacksoft/p/6916137.html" target="_blank" rel="noopener">MongoDB给数据库创建用户</a><br><a href="https://jingyan.baidu.com/article/d169e18609d989436611d82e.html" target="_blank" rel="noopener">MongoDB 创建用户 修改权限 修改密码 删除用户</a></p></li></ul><h3 id="5-数据库角色"><a href="#5-数据库角色" class="headerlink" title="5.数据库角色"></a>5.数据库角色</h3><ul><li>数据库访问<ul><li>read：允许读取指定数据库的角色</li><li>readWrite ：允许读写指定数据库的角色</li></ul></li><li>数据库管理<ul><li>dbAdmin：允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile</li><li>userAdmin：允许管理当前数据库的用户，如创建用户、为用户授权</li><li>dbOwner：数据库拥有者(最高)，集合了dbAdmin/userAdmin/readWrite角色权限</li></ul></li><li>集群管理<ul><li>clusterAdmin：集群最高管理员，集合clusterManager/clusterMonitor/hostManager角色权限</li><li>clusterManager：集群管理角色，允许对分片和副本集集群执行管理操作，如addShard，resync等</li><li>clusterMonitor：集群监控角色，允许对分片和副本集集群进行监控，如查看serverStatus</li><li>hostManager： 节点管理角色，允许监控和管理节点，比如killOp、shutdown操作</li></ul></li><li>备份恢复<ul><li>backup：备份权限，允许执行mongodump操作</li><li>restore：恢复权限，允许执行mongoresotre操作</li></ul></li><li>数据库通用角色<ul><li>readAnyDatabase：允许读取所有数据库</li><li>readWriteAnyDatabase：允许读写所有数据库</li><li>userAdminAnyDatabase：允许管理所有数据库的用户</li><li>dbAdminAnyDatabase：允许管理所有数据库</li></ul></li><li>特殊角色<ul><li>root：超级管理员，拥有所有权限</li><li>__system：内部角色，用于集群间节点通讯</li></ul></li></ul><p>参考：<br><a href="https://www.cnblogs.com/littleatp/p/7702539.html" target="_blank" rel="noopener">mongodb 认证鉴权那点事</a><br><a href="https://blog.csdn.net/u013066244/article/details/53874216" target="_blank" rel="noopener">mongodb用户权限管理配置</a><br><a href="https://blog.csdn.net/wzy0623/article/details/82999747" target="_blank" rel="noopener">浅尝辄止MongoDB：管理（1）</a></p><p>—未完待续—</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;MongoDB简介&quot;&gt;&lt;a href=&quot;#MongoDB简介&quot; class=&quot;headerlink&quot; title=&quot;MongoDB简介&quot;&gt;&lt;/a&gt;MongoDB简介&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;MongoDB是一个基于分布式文件存储的数据库。由C++语言编写。旨在为W
      
    
    </summary>
    
    
      <category term="数据库" scheme="https://liaoguanwang.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MongoDB" scheme="https://liaoguanwang.github.io/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis生成序列ID</title>
    <link href="https://liaoguanwang.github.io/Frame-MyBatis-MyBatis%E7%94%9F%E6%88%90%E5%BA%8F%E5%88%97ID/"/>
    <id>https://liaoguanwang.github.io/Frame-MyBatis-MyBatis%E7%94%9F%E6%88%90%E5%BA%8F%E5%88%97ID/</id>
    <published>2019-09-16T15:50:21.000Z</published>
    <updated>2020-03-08T11:35:49.012Z</updated>
    
    <content type="html"><![CDATA[<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用代码：</span></span><br><span class="line">Long id = sequenceDao.getNextVal();</span><br><span class="line"></span><br><span class="line"><span class="comment">//持久化层</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SequenceDao</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 得到下一个sequence值</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function">Long <span class="title">getNextVal</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.huawei.pano.dao.SequenceDao"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 得到下一个序列id --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getNextVal"</span> <span class="attr">resultType</span>=<span class="string">"java.lang.Long"</span>&gt;</span></span><br><span class="line">    SELECT DATE_FORMAT(NOW();%Y%m%d)*100000000+NEXTVAL();</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;code-area-wrap&quot;&gt;&lt;div class=&quot;highlight-tools&quot;&gt;&lt;i class=&quot;fa fa-angle-down code-expand&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;div class=&quot;code_lan
      
    
    </summary>
    
    
      <category term="ORM框架" scheme="https://liaoguanwang.github.io/categories/ORM%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="MyBatis" scheme="https://liaoguanwang.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>【转】SpringBoot MyBatis配置</title>
    <link href="https://liaoguanwang.github.io/SpringBoot-MyBatis%E9%85%8D%E7%BD%AE/"/>
    <id>https://liaoguanwang.github.io/SpringBoot-MyBatis%E9%85%8D%E7%BD%AE/</id>
    <published>2019-09-15T16:41:54.000Z</published>
    <updated>2020-03-15T17:38:36.556Z</updated>
    
    <content type="html"><![CDATA[<h2 id="加载mybatis的配置"><a href="#加载mybatis的配置" class="headerlink" title="加载mybatis的配置"></a>加载mybatis的配置</h2><h3 id="第一种、手写配置，写死在代码里"><a href="#第一种、手写配置，写死在代码里" class="headerlink" title="第一种、手写配置，写死在代码里"></a>第一种、手写配置，写死在代码里</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">import java.io.IOException;</span><br><span class="line">    import java.util.Properties;</span><br><span class="line"></span><br><span class="line">    import javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line">    import org.apache.commons.logging.Log;</span><br><span class="line">    import org.apache.commons.logging.LogFactory;</span><br><span class="line">    import org.apache.ibatis.plugin.Interceptor;</span><br><span class="line">    import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line">    import org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class="line">    import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">    import org.springframework.context.annotation.Bean;</span><br><span class="line">    import org.springframework.context.annotation.Configuration;</span><br><span class="line">    import org.springframework.core.io.DefaultResourceLoader;</span><br><span class="line">    import org.springframework.core.io.Resource;</span><br><span class="line">    import org.springframework.core.io.support.PathMatchingResourcePatternResolver;</span><br><span class="line">    import org.springframework.jdbc.datasource.DataSourceTransactionManager;</span><br><span class="line">    import org.springframework.transaction.PlatformTransactionManager;</span><br><span class="line">    import org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line">    import org.springframework.transaction.annotation.TransactionManagementConfigurer;</span><br><span class="line"></span><br><span class="line">    import com.github.pagehelper.PageHelper;</span><br><span class="line"></span><br><span class="line">    @Configuration</span><br><span class="line">    @EnableTransactionManagement</span><br><span class="line">    public class MybatisConfiguration implements TransactionManagementConfigurer&#123;</span><br><span class="line"></span><br><span class="line">        private static Log logger = LogFactory.getLog(MybatisConfiguration.class);</span><br><span class="line"></span><br><span class="line">        @Autowired</span><br><span class="line">        private DataSource dataSource;</span><br><span class="line"></span><br><span class="line">        // 提供SqlSeesion</span><br><span class="line">        @Bean(name = &quot;sqlSessionFactory&quot;)</span><br><span class="line">        public SqlSessionFactory sqlSessionFactoryBean() &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                SqlSessionFactoryBean sessionFactoryBean = new SqlSessionFactoryBean();</span><br><span class="line">                sessionFactoryBean.setDataSource(dataSource);</span><br><span class="line">                // 手写配置</span><br><span class="line">                // 配置类型别名</span><br><span class="line">                sessionFactoryBean.setTypeAliasesPackage(&quot;com.zsx.entity&quot;);</span><br><span class="line"></span><br><span class="line">                // 配置mapper的扫描，找到所有的mapper.xml映射文件</span><br><span class="line">                Resource[] resources = new PathMatchingResourcePatternResolver()</span><br><span class="line">                        .getResources(&quot;classpath:mybatis/mapper/*.xml&quot;);</span><br><span class="line">                sessionFactoryBean.setMapperLocations(resources);</span><br><span class="line"></span><br><span class="line">                // 加载全局的配置文件</span><br><span class="line">                sessionFactoryBean.setConfigLocation(</span><br><span class="line">                        new DefaultResourceLoader().getResource(&quot;classpath:mybatis/mybatis-config.xml&quot;));</span><br><span class="line"></span><br><span class="line">                //添加插件 </span><br><span class="line">                sessionFactoryBean.setPlugins(new Interceptor[]&#123;pageHelper()&#125;);</span><br><span class="line"></span><br><span class="line">                return sessionFactoryBean.getObject();</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                logger.warn(&quot;mybatis resolver mapper*xml is error&quot;);</span><br><span class="line">                return null;</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                logger.warn(&quot;mybatis sqlSessionFactoryBean create error&quot;);</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        @Bean</span><br><span class="line">        public PlatformTransactionManager annotationDrivenTransactionManager() &#123;</span><br><span class="line">            return new DataSourceTransactionManager(dataSource);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        @Bean</span><br><span class="line">        public PageHelper pageHelper()&#123;</span><br><span class="line">            logger.info(&quot;MyBatis分页插件PageHelper&quot;);</span><br><span class="line">            //分页插件</span><br><span class="line">            PageHelper pageHelper = new PageHelper();</span><br><span class="line">            Properties properties = new Properties();</span><br><span class="line">            properties.setProperty(&quot;offsetAsPageNum&quot;, &quot;true&quot;);</span><br><span class="line">            properties.setProperty(&quot;rowBoundsWithCount&quot;, &quot;true&quot;);</span><br><span class="line">            properties.setProperty(&quot;reasonable&quot;, &quot;true&quot;);</span><br><span class="line">            properties.setProperty(&quot;supportMethodsArguments&quot;, &quot;true&quot;);</span><br><span class="line">            properties.setProperty(&quot;returnPageInfo&quot;, &quot;check&quot;);</span><br><span class="line">            properties.setProperty(&quot;params&quot;, &quot;count=countSql&quot;);</span><br><span class="line">            pageHelper.setProperties(properties);</span><br><span class="line">            return pageHelper;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><h3 id="第二种、读取配置文件方式"><a href="#第二种、读取配置文件方式" class="headerlink" title="第二种、读取配置文件方式"></a>第二种、读取配置文件方式</h3><p>先在配置文件application.yml中添加</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># MyBatis</span><br><span class="line">mybatis:</span><br><span class="line">    # 配置类型别名</span><br><span class="line">    typeAliasesPackage: com.zsx.entity</span><br><span class="line">    # 配置mapper的扫描，找到所有的mapper.xml映射文件</span><br><span class="line">    mapperLocations: classpath:mybatis/mapper/*.xml</span><br><span class="line">    # 加载全局的配置文件</span><br><span class="line">    configLocation: classpath:mybatis/mybatis-config.xml</span><br></pre></td></tr></table></figure></div><p>然后配置文件为：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line"> import javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"> import org.apache.commons.logging.Log;</span><br><span class="line"> import org.apache.commons.logging.LogFactory;</span><br><span class="line"> import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"> import org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class="line"> import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"> import org.springframework.beans.factory.annotation.Value;</span><br><span class="line"> import org.springframework.context.annotation.Bean;</span><br><span class="line"> import org.springframework.context.annotation.Configuration;</span><br><span class="line"> import org.springframework.core.io.DefaultResourceLoader;</span><br><span class="line"> import org.springframework.core.io.Resource;</span><br><span class="line"> import org.springframework.core.io.support.PathMatchingResourcePatternResolver;</span><br><span class="line"> import org.springframework.jdbc.datasource.DataSourceTransactionManager;</span><br><span class="line"> import org.springframework.transaction.PlatformTransactionManager;</span><br><span class="line"> import org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"> import org.springframework.transaction.annotation.TransactionManagementConfigurer;</span><br><span class="line"></span><br><span class="line"> @Configuration</span><br><span class="line"> @EnableTransactionManagement</span><br><span class="line"> public class MybatisConfiguration implements TransactionManagementConfigurer&#123;</span><br><span class="line"></span><br><span class="line">     private static Log logger = LogFactory.getLog(MybatisConfiguration.class);</span><br><span class="line"></span><br><span class="line"> //  配置类型别名</span><br><span class="line">     @Value(&quot;$&#123;mybatis.typeAliasesPackage&#125;&quot;)</span><br><span class="line">     private String typeAliasesPackage;</span><br><span class="line"></span><br><span class="line"> //  配置mapper的扫描，找到所有的mapper.xml映射文件</span><br><span class="line">     @Value(&quot;$&#123;mybatis.mapperLocations&#125;&quot;)</span><br><span class="line">     private String mapperLocations;</span><br><span class="line"></span><br><span class="line"> //  加载全局的配置文件</span><br><span class="line">     @Value(&quot;$&#123;mybatis.configLocation&#125;&quot;)</span><br><span class="line">     private String configLocation;</span><br><span class="line"></span><br><span class="line">     @Autowired</span><br><span class="line">     private DataSource dataSource;</span><br><span class="line">     // DataSource配置</span><br><span class="line"> //  @Bean</span><br><span class="line"> //  @ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span><br><span class="line"> //  public DruidDataSource dataSource() &#123;</span><br><span class="line"> //      return new com.alibaba.druid.pool.DruidDataSource();</span><br><span class="line"> //  &#125;</span><br><span class="line"></span><br><span class="line">     // 提供SqlSeesion</span><br><span class="line">     @Bean(name = &quot;sqlSessionFactory&quot;)</span><br><span class="line">     public SqlSessionFactory sqlSessionFactoryBean() &#123;</span><br><span class="line">         try &#123;</span><br><span class="line">             SqlSessionFactoryBean sessionFactoryBean = new SqlSessionFactoryBean();</span><br><span class="line">             sessionFactoryBean.setDataSource(dataSource);</span><br><span class="line"></span><br><span class="line">             // 读取配置 </span><br><span class="line">             sessionFactoryBean.setTypeAliasesPackage(typeAliasesPackage);</span><br><span class="line"></span><br><span class="line">             // </span><br><span class="line">             Resource[] resources = new PathMatchingResourcePatternResolver()</span><br><span class="line">                     .getResources(mapperLocations);</span><br><span class="line">             sessionFactoryBean.setMapperLocations(resources);</span><br><span class="line"> //      //</span><br><span class="line">             sessionFactoryBean.setConfigLocation(</span><br><span class="line">                     new DefaultResourceLoader().getResource(configLocation));</span><br><span class="line"></span><br><span class="line">             //添加插件  （改为使用配置文件加载了）</span><br><span class="line"> //          sqlSessionFactoryBean.setPlugins(new Interceptor[]&#123;pageHelper()&#125;);</span><br><span class="line"></span><br><span class="line">             return sessionFactoryBean.getObject();</span><br><span class="line">         &#125; catch (IOException e) &#123;</span><br><span class="line">             logger.warn(&quot;mybatis resolver mapper*xml is error&quot;);</span><br><span class="line">             return null;</span><br><span class="line">         &#125; catch (Exception e) &#123;</span><br><span class="line">             logger.warn(&quot;mybatis sqlSessionFactoryBean create error&quot;);</span><br><span class="line">             return null;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> //  @Bean</span><br><span class="line"> //    public SqlSessionTemplate sqlSessionTemplate(SqlSessionFactory sqlSessionFactory) &#123;</span><br><span class="line"> //        return new SqlSessionTemplate(sqlSessionFactory);</span><br><span class="line"> //    &#125;</span><br><span class="line"></span><br><span class="line"> //  @Bean</span><br><span class="line"> //  public PlatformTransactionManager transactionManager()&#123;</span><br><span class="line"> //      return new DataSourceTransactionManager(dataSource);</span><br><span class="line"> //  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     @Bean</span><br><span class="line">     public PlatformTransactionManager annotationDrivenTransactionManager() &#123;</span><br><span class="line">         return new DataSourceTransactionManager(dataSource);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div><p>最后还有配置一个扫描mapper的类：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import org.mybatis.spring.mapper.MapperScannerConfigurer;</span><br><span class="line">import org.springframework.boot.autoconfigure.AutoConfigureAfter;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">//TODO 注意，由于MapperScannerConfigurer执行的比较早，所以必须有下面的注解</span><br><span class="line">@AutoConfigureAfter(&#123;MybatisConfiguration.class&#125;)</span><br><span class="line">public class MyBatisMapperScannerConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public MapperScannerConfigurer mapperScannerConfigurer()&#123;</span><br><span class="line">        MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();</span><br><span class="line"></span><br><span class="line">        mapperScannerConfigurer.setSqlSessionFactoryBeanName(&quot;sqlSessionFactory&quot;);</span><br><span class="line">        mapperScannerConfigurer.setBasePackage(&quot;com.zsx.dao&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return mapperScannerConfigurer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>还有一个 mybatis-config.xml</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;property name=&quot;dialect&quot; value=&quot;mysql&quot; /&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line">    &lt;settings&gt;</span><br><span class="line">        &lt;!-- 开启驼峰匹配 --&gt;</span><br><span class="line">        &lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;!-- 这个配置使全局的映射器启用或禁用缓存。系统默认值是true，设置只是为了展示出来 --&gt;</span><br><span class="line">        &lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">        &lt;!-- 全局启用或禁用延迟加载。当禁用时，所有关联对象都会即时加载。 系统默认值是true，设置只是为了展示出来 --&gt;</span><br><span class="line">        &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">        &lt;!-- 允许或不允许多种结果集从一个单独的语句中返回（需要适合的驱动）。 系统默认值是true，设置只是为了展示出来 --&gt;</span><br><span class="line">        &lt;setting name=&quot;multipleResultSetsEnabled&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">        &lt;!--使用列标签代替列名。不同的驱动在这方便表现不同。参考驱动文档或充分测试两种方法来决定所使用的驱动。 系统默认值是true，设置只是为了展示出来 --&gt;</span><br><span class="line">        &lt;setting name=&quot;useColumnLabel&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">        &lt;!--允许 JDBC 支持生成的键。需要适合的驱动。如果设置为 true 则这个设置强制生成的键被使用，尽管一些驱动拒绝兼容但仍然有效（比如 </span><br><span class="line">            Derby）。 系统默认值是false，设置只是为了展示出来 --&gt;</span><br><span class="line">        &lt;setting name=&quot;useGeneratedKeys&quot; value=&quot;false&quot; /&gt;</span><br><span class="line">        &lt;!--配置默认的执行器。SIMPLE 执行器没有什么特别之处。REUSE 执行器重用预处理语句。BATCH 执行器重用语句和批量更新 系统默认值是SIMPLE，设置只是为了展示出来 --&gt;</span><br><span class="line">        &lt;setting name=&quot;defaultExecutorType&quot; value=&quot;SIMPLE&quot; /&gt;</span><br><span class="line">        &lt;!--设置超时时间，它决定驱动等待一个数据库响应的时间。 系统默认值是null，设置只是为了展示出来 --&gt;</span><br><span class="line">        &lt;setting name=&quot;defaultStatementTimeout&quot; value=&quot;25000&quot; /&gt;</span><br><span class="line">    &lt;/settings&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 分页助手 --&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">        &lt;plugin interceptor=&quot;com.github.pagehelper.PageHelper&quot;&gt;</span><br><span class="line">            &lt;!-- 数据库方言 --&gt;</span><br><span class="line">            &lt;property name=&quot;dialect&quot; value=&quot;mysql&quot; /&gt;</span><br><span class="line">            &lt;property name=&quot;offsetAsPageNum&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">            &lt;!-- 设置为true时，使用RowBounds分页会进行count查询 会去查询出总数 --&gt;</span><br><span class="line">            &lt;property name=&quot;rowBoundsWithCount&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">            &lt;property name=&quot;pageSizeZero&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">            &lt;property name=&quot;reasonable&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></div><p>参考：<a href="https://blog.csdn.net/javahighness/article/details/53044655" target="_blank" rel="noopener">https://blog.csdn.net/javahighness/article/details/53044655</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;加载mybatis的配置&quot;&gt;&lt;a href=&quot;#加载mybatis的配置&quot; class=&quot;headerlink&quot; title=&quot;加载mybatis的配置&quot;&gt;&lt;/a&gt;加载mybatis的配置&lt;/h2&gt;&lt;h3 id=&quot;第一种、手写配置，写死在代码里&quot;&gt;&lt;a href=
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://liaoguanwang.github.io/categories/SpringBoot/"/>
    
    
      <category term="Mybatis" scheme="https://liaoguanwang.github.io/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB配置问题</title>
    <link href="https://liaoguanwang.github.io/DB-MongoDB-MongoDB%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/"/>
    <id>https://liaoguanwang.github.io/DB-MongoDB-MongoDB%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/</id>
    <published>2019-09-10T15:46:29.000Z</published>
    <updated>2020-03-08T11:35:48.996Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-mongodb启动配置"><a href="#1-mongodb启动配置" class="headerlink" title="1. mongodb启动配置"></a>1. mongodb启动配置</h3><p>参考：<a href="https://www.jianshu.com/p/6f4549037cc1" target="_blank" rel="noopener">Windows下mongodb的启动</a></p><h3 id="2-Invalid-command-files-mongoDB"><a href="#2-Invalid-command-files-mongoDB" class="headerlink" title="2. Invalid command: files\mongoDB"></a>2. Invalid command: files\mongoDB</h3><p>报错信息：<br><a href="https://img2018.cnblogs.com/blog/1351916/201905/1351916-20190506235357505-310315469.png" data-fancybox="group" data-caption class="fancybox"><img src="https://img2018.cnblogs.com/blog/1351916/201905/1351916-20190506235357505-310315469.png" alt title></a></p><p>正确方法：<br><a href="https://img2018.cnblogs.com/blog/1351916/201905/1351916-20190506235618294-1343038263.png" data-fancybox="group" data-caption class="fancybox"><img src="https://img2018.cnblogs.com/blog/1351916/201905/1351916-20190506235618294-1343038263.png" alt title></a></p><p>原因：路径之中有空格会当参数来处理，需要将整个路径加上引号</p><h3 id="3-MongoDB连接认证失败"><a href="#3-MongoDB连接认证失败" class="headerlink" title="3. MongoDB连接认证失败"></a>3. MongoDB连接认证失败</h3><p>SpringBoot配置MongoDB地址时，如果不设置连接方式默认是MONGODB-CR,如果安装的时候设置的是SCRAM-SHA-1。</p><p>需要在配置mongodb地址的时候加上连接方式：<br>spring.data.mongodb.uri=mongodb://root(userName):root(password)@localhost(ip地址):27017(端口号)/gis(collections/数据库)?authSource=admin&amp;authMechanism=SCRAM-SHA-1</p><h3 id="4-Unauthorized-not-authorized-on-test-to-execute-command-dbstats-1-0-scale-undefined-db-“test”"><a href="#4-Unauthorized-not-authorized-on-test-to-execute-command-dbstats-1-0-scale-undefined-db-“test”" class="headerlink" title="4. Unauthorized: not authorized on test to execute command { dbstats: 1.0, scale: undefined, $db: “test” }"></a>4. Unauthorized: not authorized on test to execute command { dbstats: 1.0, scale: undefined, $db: “test” }</h3><p>当前版本3.6.2<br>问题原因出在读写的权限上：stackoverflow上的解决方法</p><p>You should have started the mongod instance with access control, i.e., the –auth command line option, such as:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mongod --auth</span><br></pre></td></tr></table></figure></div><p>Let’s start the mongo shell, and create an administrator in the admin database:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ mongo</span><br><span class="line">&gt; use admin</span><br><span class="line">&gt; db.createUser(</span><br><span class="line">  &#123;</span><br><span class="line">    user: &quot;myUserAdmin&quot;,</span><br><span class="line">    pwd: &quot;abc123&quot;,</span><br><span class="line">    roles: [ &#123; role: &quot;userAdminAnyDatabase&quot;, db: &quot;admin&quot; &#125; ]</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div><p>Now if you run command “db.stats()”, or “show users”, you will get error “not authorized on admin to execute command…”</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.stats()</span><br><span class="line">&#123;</span><br><span class="line">        &quot;ok&quot; : 0,</span><br><span class="line">        &quot;errmsg&quot; : &quot;not authorized on admin to execute command &#123; dbstats: 1.0, scale: undefined &#125;&quot;,</span><br><span class="line">        &quot;code&quot; : 13,</span><br><span class="line">        &quot;codeName&quot; : &quot;Unauthorized&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>下面这两句最重要，如果是开始新建 ，则要从头开始看:<br>The reason is that you still have not granted role “read” or “readWrite” to user myUserAdmin. You can do it as below:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.auth(&quot;myUserAdmin&quot;, &quot;abc123&quot;)</span><br><span class="line">&gt; db.grantRolesToUser(&quot;myUserAdmin&quot;, [ &#123; role: &quot;read&quot;, db: &quot;admin&quot; &#125; ])</span><br></pre></td></tr></table></figure></div><p>Now You can verify it (Command “show users” now works):</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt; show users</span><br><span class="line">&#123;</span><br><span class="line">        &quot;_id&quot; : &quot;admin.myUserAdmin&quot;,</span><br><span class="line">        &quot;user&quot; : &quot;myUserAdmin&quot;,</span><br><span class="line">        &quot;db&quot; : &quot;admin&quot;,</span><br><span class="line">        &quot;roles&quot; : [</span><br><span class="line">                &#123;</span><br><span class="line">                        &quot;role&quot; : &quot;read&quot;,</span><br><span class="line">                        &quot;db&quot; : &quot;admin&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                        &quot;role&quot; : &quot;userAdminAnyDatabase&quot;,</span><br><span class="line">                        &quot;db&quot; : &quot;admin&quot;</span><br><span class="line">                &#125;</span><br><span class="line">        ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Now if you run &quot;db.stats()&quot;, you&apos;ll also be OK:</span><br></pre></td></tr></table></figure></div><blockquote><p>db.stats()<br>{<br>        “db” : “admin”,<br>        “collections” : 2,<br>        “views” : 0,<br>        “objects” : 3,<br>        “avgObjSize” : 151,<br>        “dataSize” : 453,<br>        “storageSize” : 65536,<br>        “numExtents” : 0,<br>        “indexes” : 3,<br>        “indexSize” : 81920,<br>        “ok” : 1<br>}</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">This user and role mechanism can be applied to any other databases in MongoDB as well, in addition to the admin database.</span><br></pre></td></tr></table></figure></div><p>参考：<a href="https://www.cnblogs.com/herosoft/p/8399974.html" target="_blank" rel="noopener">Unauthorized: not authorized on test to execute command { dbstats: 1.0, scale: undefined, $db: “test” } 错误的解决</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-mongodb启动配置&quot;&gt;&lt;a href=&quot;#1-mongodb启动配置&quot; class=&quot;headerlink&quot; title=&quot;1. mongodb启动配置&quot;&gt;&lt;/a&gt;1. mongodb启动配置&lt;/h3&gt;&lt;p&gt;参考：&lt;a href=&quot;https://www.
      
    
    </summary>
    
    
      <category term="数据库" scheme="https://liaoguanwang.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MongoDB" scheme="https://liaoguanwang.github.io/tags/MongoDB/"/>
    
      <category term="NoSQL" scheme="https://liaoguanwang.github.io/tags/NoSQL/"/>
    
      <category term="配置" scheme="https://liaoguanwang.github.io/tags/%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>SpringJPA主键生成采用自定义ID，自定义ID采用年月日时间格式</title>
    <link href="https://liaoguanwang.github.io/Frame-SpringJPA-SpringJPA%E4%B8%BB%E9%94%AE%E7%94%9F%E6%88%90%E9%87%87%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89ID%EF%BC%8C%E8%87%AA%E5%AE%9A%E4%B9%89ID%E9%87%87%E7%94%A8%E5%B9%B4%E6%9C%88%E6%97%A5%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F/"/>
    <id>https://liaoguanwang.github.io/Frame-SpringJPA-SpringJPA%E4%B8%BB%E9%94%AE%E7%94%9F%E6%88%90%E9%87%87%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89ID%EF%BC%8C%E8%87%AA%E5%AE%9A%E4%B9%89ID%E9%87%87%E7%94%A8%E5%B9%B4%E6%9C%88%E6%97%A5%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F/</id>
    <published>2019-09-10T15:45:25.000Z</published>
    <updated>2020-03-08T11:35:49.035Z</updated>
    
    <content type="html"><![CDATA[<h3 id="自定义主键生成策略"><a href="#自定义主键生成策略" class="headerlink" title="自定义主键生成策略"></a>自定义主键生成策略</h3><ol><li>在entity类上添加注解<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@GeneratedValue</span>(strategy = GenerationType.AUTO, generator = <span class="string">"custom-id"</span>)     <span class="meta">@GenericGenerator</span>(name = <span class="string">"custom-id"</span>, strategy = <span class="string">"com.h5page-mapdiy.utils.CustomIDGenerator"</span>)</span><br><span class="line"><span class="meta">@Column</span>(name = <span class="string">"id"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ol><p>注意：GeneratedValue中的generator要与GenericGenerator中的name相等 上面代码中是”custom-id”</p><ol start="2"><li>在utils包下添加自定义ID生成类<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.h5page-mapdiy.utils</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hibernate.MappingException;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.engine.spi.SharedSessionContractImplementor;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.id.IdentityGenerator;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义ID生成器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liaoguanwang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-03-16 10:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomIDGenerator</span> <span class="keyword">extends</span> <span class="title">UUIDGenerator</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Serializable <span class="title">generate</span><span class="params">(SharedSessionContractImplementor session, Object object)</span> <span class="keyword">throws</span> MappingException </span>&#123;</span><br><span class="line"></span><br><span class="line">        SimpleDateFormat simpleDateFormat;  </span><br><span class="line">        simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMMddHHmmss"</span>);  </span><br><span class="line">        Date date = <span class="keyword">new</span> Date();  </span><br><span class="line">        String str = simpleDateFormat.format(date);  </span><br><span class="line">        Random random = <span class="keyword">new</span> Random();  </span><br><span class="line">        <span class="keyword">int</span> rannum = (<span class="keyword">int</span>) (random.nextDouble() * (<span class="number">99999</span> - <span class="number">10000</span> + <span class="number">1</span>)) + <span class="number">10000</span>;<span class="comment">// 获取5位随机数  </span></span><br><span class="line">        <span class="keyword">return</span> rannum + str;<span class="comment">// 当前时间  </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ol><p>注意：</p><ol><li>测试的ID是Long类型所以这里继承的是IdentityGenerator类</li><li>如果ID为String类型的话应该继承 UUIDGenerator 或者 UUIDGenerator</li></ol><p>参考：<br><a href="https://www.cnblogs.com/DevMuYuer/p/10088425.html" target="_blank" rel="noopener">Spring boot JPA 用自定义主键策略 生成自定义主键ID</a></p><p><a href="https://sxdtzhaoxinguo.iteye.com/blog/2274635" target="_blank" rel="noopener">AVA随机生成文件名：当前年月日时分秒+五位随机数</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;自定义主键生成策略&quot;&gt;&lt;a href=&quot;#自定义主键生成策略&quot; class=&quot;headerlink&quot; title=&quot;自定义主键生成策略&quot;&gt;&lt;/a&gt;自定义主键生成策略&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;在entity类上添加注解&lt;div class=&quot;code-area-w
      
    
    </summary>
    
    
      <category term="ORM" scheme="https://liaoguanwang.github.io/categories/ORM/"/>
    
    
      <category term="SpringDataJPA" scheme="https://liaoguanwang.github.io/tags/SpringDataJPA/"/>
    
  </entry>
  
  <entry>
    <title>Java根据经纬度算出附近的正方形的四个角的经纬度</title>
    <link href="https://liaoguanwang.github.io/%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7-%E6%A0%B9%E6%8D%AE%E7%BB%8F%E7%BA%AC%E5%BA%A6%E7%AE%97%E5%87%BA%E9%99%84%E8%BF%91%E7%9A%84%E6%AD%A3%E6%96%B9%E5%BD%A2%E7%9A%84%E5%9B%9B%E4%B8%AA%E8%A7%92%E7%9A%84%E7%BB%8F%E7%BA%AC%E5%BA%A6/"/>
    <id>https://liaoguanwang.github.io/%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7-%E6%A0%B9%E6%8D%AE%E7%BB%8F%E7%BA%AC%E5%BA%A6%E7%AE%97%E5%87%BA%E9%99%84%E8%BF%91%E7%9A%84%E6%AD%A3%E6%96%B9%E5%BD%A2%E7%9A%84%E5%9B%9B%E4%B8%AA%E8%A7%92%E7%9A%84%E7%BB%8F%E7%BA%AC%E5%BA%A6/</id>
    <published>2019-09-09T15:06:28.000Z</published>
    <updated>2020-03-08T11:35:48.987Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>  项目开发中csv文件转化为geojson文件中，涉及到路测图的打点生成，打点是由一个个正方形组成，而正方形是由四个点组成的，这四个点根据经纬度和范围生成，实现代码参考网上：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> longitude 经度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> latitude  纬度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> distance  范围（米）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, <span class="keyword">double</span>[]&gt; returnLLSquarePoint(<span class="keyword">double</span> longitude,  <span class="keyword">double</span> latitude, <span class="keyword">double</span> distance) &#123;</span><br><span class="line">        Map&lt;String, <span class="keyword">double</span>[]&gt; squareMap = <span class="keyword">new</span> HashMap&lt;String, <span class="keyword">double</span>[]&gt;();</span><br><span class="line">        <span class="comment">// 计算经度弧度,从弧度转换为角度</span></span><br><span class="line">        <span class="keyword">double</span> dLongitude = <span class="number">2</span> * (Math.asin(Math.sin(distance</span><br><span class="line">                / (<span class="number">2</span> * <span class="number">6378137</span>))</span><br><span class="line">                / Math.cos(Math.toRadians(latitude))));</span><br><span class="line">        dLongitude = Math.toDegrees(dLongitude);</span><br><span class="line">        <span class="comment">// 计算纬度角度</span></span><br><span class="line">        <span class="keyword">double</span> dLatitude = distance / <span class="number">6378137</span>;</span><br><span class="line">        dLatitude = Math.toDegrees(dLatitude);</span><br><span class="line">        <span class="comment">// 正方形</span></span><br><span class="line">        <span class="keyword">double</span>[] leftTopPoint = &#123; latitude + dLatitude, longitude - dLongitude &#125;;</span><br><span class="line">        <span class="keyword">double</span>[] rightTopPoint = &#123; latitude + dLatitude, longitude + dLongitude &#125;;</span><br><span class="line">        <span class="keyword">double</span>[] leftBottomPoint = &#123; latitude - dLatitude,</span><br><span class="line">                longitude - dLongitude &#125;;</span><br><span class="line">        <span class="keyword">double</span>[] rightBottomPoint = &#123; latitude - dLatitude,</span><br><span class="line">                longitude + dLongitude &#125;;</span><br><span class="line">        squareMap.put(<span class="string">"leftTopPoint"</span>, leftTopPoint);</span><br><span class="line">        squareMap.put(<span class="string">"rightTopPoint"</span>, rightTopPoint);</span><br><span class="line">        squareMap.put(<span class="string">"leftBottomPoint"</span>, leftBottomPoint);</span><br><span class="line">        squareMap.put(<span class="string">"rightBottomPoint"</span>, rightBottomPoint);</span><br><span class="line">        System.out.println(<span class="string">"leftTop："</span>+leftTopPoint[<span class="number">0</span>]+<span class="string">"======"</span>+leftTopPoint[<span class="number">1</span>]);</span><br><span class="line">        System.out.println(<span class="string">"rightTop："</span>+rightTopPoint[<span class="number">0</span>]+<span class="string">"======"</span>+rightTopPoint[<span class="number">1</span>]);</span><br><span class="line">        System.out.println(<span class="string">"leftBottom："</span>+leftBottomPoint[<span class="number">0</span>]+<span class="string">"======"</span>+leftBottomPoint[<span class="number">1</span>]);</span><br><span class="line">        System.out.println(<span class="string">"rightBottom："</span>+rightBottomPoint[<span class="number">0</span>]+<span class="string">"======"</span>+rightBottomPoint[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> squareMap;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><p>参考：<a href="https://www.cnblogs.com/chen-lhx/p/5800187.html" target="_blank" rel="noopener">JAVA 根据经纬度算出附近的正方形的四个角的经纬度</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;  项目开发中csv文件转化为geojson文件中，涉及到路测图的打点生成，打点是由一个个正方形组成，而正方形是由四个点组成的，这四个点根据
      
    
    </summary>
    
    
      <category term="Java" scheme="https://liaoguanwang.github.io/categories/Java/"/>
    
    
      <category term="业务" scheme="https://liaoguanwang.github.io/tags/%E4%B8%9A%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>idea解除svn关联</title>
    <link href="https://liaoguanwang.github.io/Tool-Idea%E8%A7%A3%E9%99%A4svn%E5%85%B3%E8%81%94/"/>
    <id>https://liaoguanwang.github.io/Tool-Idea%E8%A7%A3%E9%99%A4svn%E5%85%B3%E8%81%94/</id>
    <published>2019-09-09T15:04:33.000Z</published>
    <updated>2020-03-10T16:49:55.989Z</updated>
    
    <content type="html"><![CDATA[<p>有时候项目需要解除svn关联，百度谷歌几篇，以下方式是最简单快捷的。</p><p>从.idea文件夹下手，找到了cvs.xml，其内容如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">version</span>=<span class="string">"4"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">name</span>=<span class="string">"VcsDirectoryMappings"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">directory</span>=<span class="string">""</span> <span class="attr">vcs</span>=<span class="string">"svn"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></div><ol><li><component> </component>节点及其内容全部注释掉</li><li>直接删除掉.idea文件</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有时候项目需要解除svn关联，百度谷歌几篇，以下方式是最简单快捷的。&lt;/p&gt;
&lt;p&gt;从.idea文件夹下手，找到了cvs.xml，其内容如下：&lt;/p&gt;
&lt;div class=&quot;code-area-wrap&quot;&gt;&lt;div class=&quot;highlight-tools&quot;&gt;&lt;i c
      
    
    </summary>
    
    
      <category term="Tool" scheme="https://liaoguanwang.github.io/categories/Tool/"/>
    
    
      <category term="IDEA" scheme="https://liaoguanwang.github.io/tags/IDEA/"/>
    
      <category term="SVN" scheme="https://liaoguanwang.github.io/tags/SVN/"/>
    
  </entry>
  
  <entry>
    <title>Java实现Inputstream流的复制</title>
    <link href="https://liaoguanwang.github.io/Java-IO-Java%E5%AE%9E%E7%8E%B0Inputstream%E6%B5%81%E7%9A%84%E5%A4%8D%E5%88%B6/"/>
    <id>https://liaoguanwang.github.io/Java-IO-Java%E5%AE%9E%E7%8E%B0Inputstream%E6%B5%81%E7%9A%84%E5%A4%8D%E5%88%B6/</id>
    <published>2019-09-05T15:52:01.000Z</published>
    <updated>2020-03-08T11:35:48.959Z</updated>
    
    <content type="html"><![CDATA[<p>获取到一个inputstream后，可能要多次利用它进行read的操作。由于流读过一次就不能再读了，而InputStream对象本身不能复制，而且它也没有实现Cloneable接口，所以得想点办法。</p><p>实现思路：</p><p>1、先把InputStream转化成ByteArrayOutputStream</p><p>2、后面要使用InputStream对象时，再从ByteArrayOutputStream转化回来</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamOperateUtil</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line"> </span><br><span class="line">InputStream input =  <span class="keyword">new</span> FileInputStream(<span class="string">"c:\\test.txt"</span>); </span><br><span class="line"><span class="comment">//InputStream input =  httpconn.getInputStream(); //这里可以写你获取到的流</span></span><br><span class="line"></span><br><span class="line">ByteArrayOutputStream baos = cloneInputStream(input);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开两个新的输入流  </span></span><br><span class="line">InputStream stream1 = <span class="keyword">new</span> ByteArrayInputStream(baos.toByteArray());  </span><br><span class="line">InputStream stream2 = <span class="keyword">new</span> ByteArrayInputStream(baos.toByteArray());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ByteArrayOutputStream <span class="title">cloneInputStream</span><span class="params">(InputStream input)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line"><span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"><span class="keyword">while</span> ((len = input.read(buffer)) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">baos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">&#125;</span><br><span class="line">baos.flush();</span><br><span class="line"><span class="keyword">return</span> baos;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>这种适用于一些不是很大的流，因为缓存流是会消耗内存的。</p><p>备注：<a href="http://blog.csdn.net/dreamtdp/article/details/26733563" target="_blank" rel="noopener">关于InputStream为什么不能被重复读取？</a></p><p>转自: <a href="https://blog.csdn.net/qq_25646191/article/details/78856639" target="_blank" rel="noopener">Java实现inputstream流的复制</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;获取到一个inputstream后，可能要多次利用它进行read的操作。由于流读过一次就不能再读了，而InputStream对象本身不能复制，而且它也没有实现Cloneable接口，所以得想点办法。&lt;/p&gt;
&lt;p&gt;实现思路：&lt;/p&gt;
&lt;p&gt;1、先把InputStream转化
      
    
    </summary>
    
    
      <category term="Java" scheme="https://liaoguanwang.github.io/categories/Java/"/>
    
    
      <category term="IO" scheme="https://liaoguanwang.github.io/tags/IO/"/>
    
  </entry>
  
  <entry>
    <title>mybatis中${}和#{}的区别</title>
    <link href="https://liaoguanwang.github.io/Frame-MyBatis-mybatis%E4%B8%AD$%7B%7D%E5%92%8C%E4%BA%95%7B%7D%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://liaoguanwang.github.io/Frame-MyBatis-mybatis%E4%B8%AD$%7B%7D%E5%92%8C%E4%BA%95%7B%7D%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2019-08-29T16:07:09.000Z</published>
    <updated>2020-03-08T11:35:49.014Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-知识点"><a href="#1-知识点" class="headerlink" title="1. 知识点"></a>1. 知识点</h2><p>MyBatis中使用parameterType向SQL语句传参，parameterType后的类型可以是基本类型int,String,HashMap和java自定义类型。<br>在SQL中引用这些参数的时候，可以使用两种方式#{parameterName}或者${parameterName}。</p><h2 id="2-总结"><a href="#2-总结" class="headerlink" title="2. 总结"></a>2. 总结</h2><ol><li><p>#将传入的数据都当成一个字符串，会对自动传入的数据加一个双引号。<br>例如：where username=#{username}，如果传入的值是zhangsan,那么解析成sql时的值为where username=”zhangsan”。</p></li><li><p>$ 将传入的数据直接显示生成在sql中。<br>例如：where username=${username}，如果传入的值是zhangsan,那么解析成sql时的值为where username=zhangsan；</p></li><li><p>#方式能够很大程度防止SQL注入，$方式无法防止SQL注入。<br>如果传入的值为;drop table user;<br>#{}方式的SQL语句为: select id, username, password from user where username = “;drop table user;”<br>${}方式的SQL语句为: select id, username, password from user where username = ;drop table user;</p></li><li><p>$ 方式一般用于传入数据库对象，例如传入表名和列名。<br>例外：排序时使用order by动态参数时需要使用$  ,ORDER BY ${columnName}</p></li><li><p>一般能用#的就别用$ ，若不得不使用”${xxx}”这样的参数，要手工地做好过滤工作，来防止sql注入攻击。</p></li><li><p>在MyBatis中，”$ {xxx}”这样格式的参数会直接参与SQL编译，从而不能避免注入攻击。但涉及到动态表名和列名时，只能使用”${xxx}”这样的参数格式。所以，这样的参数需要我们在代码中手工进行处理来防止注入。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-知识点&quot;&gt;&lt;a href=&quot;#1-知识点&quot; class=&quot;headerlink&quot; title=&quot;1. 知识点&quot;&gt;&lt;/a&gt;1. 知识点&lt;/h2&gt;&lt;p&gt;MyBatis中使用parameterType向SQL语句传参，parameterType后的类型可以是基本类型
      
    
    </summary>
    
    
      <category term="ORM框架" scheme="https://liaoguanwang.github.io/categories/ORM%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="MyBatis" scheme="https://liaoguanwang.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>Java——String类型与Date类型之间的转化</title>
    <link href="https://liaoguanwang.github.io/Java-%E5%9F%BA%E7%A1%80-Java-String%E7%B1%BB%E5%9E%8B%E4%B8%8EDate%E7%B1%BB%E5%9E%8B%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E5%8C%96/"/>
    <id>https://liaoguanwang.github.io/Java-%E5%9F%BA%E7%A1%80-Java-String%E7%B1%BB%E5%9E%8B%E4%B8%8EDate%E7%B1%BB%E5%9E%8B%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E5%8C%96/</id>
    <published>2019-08-29T15:50:39.000Z</published>
    <updated>2020-03-08T11:35:48.962Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-String类型转化为Date类型"><a href="#1-String类型转化为Date类型" class="headerlink" title="1. String类型转化为Date类型"></a>1. String类型转化为Date类型</h2><h3 id="1-1-方法一"><a href="#1-1-方法一" class="headerlink" title="1.1 方法一"></a>1.1 方法一</h3><p>Date date=new Date(“2019-01-25”);</p><h3 id="1-2-方法二"><a href="#1-2-方法二" class="headerlink" title="1.2 方法二"></a>1.2 方法二</h3><p>String =(new SimpleDateFormat(“格式”)).format(Date); </p><h3 id="1-3-方法三"><a href="#1-3-方法三" class="headerlink" title="1.3 方法三"></a>1.3 方法三</h3><p>SimpleDateFormat sdf=new SimpleDateFormat(“yyyy-MM-dd”);String dstr=”2008-4-24”;java.util.Date date=sdf.parse(dstr);</p><h2 id="2-Date类型转化为String类型"><a href="#2-Date类型转化为String类型" class="headerlink" title="2. Date类型转化为String类型"></a>2. Date类型转化为String类型</h2><h3 id="2-1-方法一"><a href="#2-1-方法一" class="headerlink" title="2.1 方法一"></a>2.1 方法一</h3><p>StringDateFormat stringDateFormat = new StringDateFormat(“yyyy-MM-dd”);<br>java.util.Date date = new java.util.Date();<br>String string = stringDateFormat.format(date);</p><h3 id="2-2-方法二"><a href="#2-2-方法二" class="headerlink" title="2.2 方法二"></a>2.2 方法二</h3><p>Date = (new SimpleDateFormat(“格式”).parse(String);</p><table><thead><tr><th>字母</th><th>日期或时间元素</th><th>表示</th><th>实例</th></tr></thead><tbody><tr><td>G</td><td>Era标识符</td><td>Text</td><td>AD</td></tr></tbody></table><p>参考：<br><a href="https://zhidao.baidu.com/question/534635378.html" target="_blank" rel="noopener">java string类型怎么转化成date类型 精选</a></p><p><a href="https://www.2cto.com/kf/201304/205998.html" target="_blank" rel="noopener">GMT时间格式转换(Mon Feb 13 08:00:00 GMT+08:00 2012)</a></p><p><a href="https://blog.csdn.net/u013412772/article/details/73610803" target="_blank" rel="noopener">Java时间处理(UTC时间和本地时间转换)</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-String类型转化为Date类型&quot;&gt;&lt;a href=&quot;#1-String类型转化为Date类型&quot; class=&quot;headerlink&quot; title=&quot;1. String类型转化为Date类型&quot;&gt;&lt;/a&gt;1. String类型转化为Date类型&lt;/h2&gt;&lt;h3
      
    
    </summary>
    
    
      <category term="Java" scheme="https://liaoguanwang.github.io/categories/Java/"/>
    
    
      <category term="Java基础" scheme="https://liaoguanwang.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Spring注解</title>
    <link href="https://liaoguanwang.github.io/Frame-Spring-Spring%E6%B3%A8%E8%A7%A3/"/>
    <id>https://liaoguanwang.github.io/Frame-Spring-Spring%E6%B3%A8%E8%A7%A3/</id>
    <published>2019-08-28T15:51:24.000Z</published>
    <updated>2020-03-08T11:35:49.017Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h3><blockquote><p>一句话概括就是 @Configuration 中所有带 @Bean 注解的方法都会被动态代理，因此调用该方法返回的都是同一个实例。</p></blockquote><h4 id="Configuration-注解："><a href="#Configuration-注解：" class="headerlink" title="Configuration 注解："></a>Configuration 注解：</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Target(ElementType.TYPE)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">@Component</span><br><span class="line">public @interface Configuration &#123;</span><br><span class="line">    String value() default &quot;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>从定义来看， @Configuration 注解本质上还是 @Component，因此 <a href="context:component-scan/" target="_blank" rel="noopener">context:component-scan/</a> 或者 @ComponentScan 都能处理@Configuration 注解的类。</p><p>@Configuration 标记的类必须符合下面的要求：</p><ul><li>配置类必须以类的形式提供（不能是工厂方法返回的实例），允许通过生成子类在运行时增强（cglib 动态代理）。</li><li>配置类不能是 final 类（没法动态代理）。</li><li>配置注解通常为了通过 @Bean 注解生成 Spring 容器管理的类，</li><li>配置类必须是非本地的（即不能在方法中声明，不能是 private）。</li><li>任何嵌套配置类都必须声明为static。</li><li>@Bean 方法可能不会反过来创建进一步的配置类（也就是返回的 bean 如果带有 @Configuration，也不会被特殊处理，只会作为普通的 bean）。</li></ul><p>参考：<a href="https://blog.csdn.net/isea533/article/details/78072133" target="_blank" rel="noopener">Spring @Configuration 和 @Component 区别</a></p><h3 id="Configuration和-Component的区别"><a href="#Configuration和-Component的区别" class="headerlink" title="@Configuration和@Component的区别"></a>@Configuration和@Component的区别</h3><p>同：都是注解在类上的注解<br>异：</p><ul><li>使用Configuration时在driver和spring容器之中的是同一个对象，而使用Component时是不同的对象</li><li>@Component范围广，所有类都可注解</li><li>@Value的成员变量和@Bean注解方法，就是一个配置类</li></ul><p>参考：<a href="https://blog.csdn.net/long476964/article/details/80626930" target="_blank" rel="noopener">@Component和@Configuration作为配置类的差别</a></p><h3 id="spring不返回某个字段给前端"><a href="#spring不返回某个字段给前端" class="headerlink" title="spring不返回某个字段给前端"></a>spring不返回某个字段给前端</h3><p>1.@JsonIngoreProperties(value={“xxx})<br>注解使用在类名，接口头上</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonIngoreProperties</span>(value=&#123;<span class="string">"username&#125;)</span></span><br><span class="line"><span class="string">public interface User()&#123;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></div><p>2.@JsonIgnore<br>该注解用在字段的get方法上</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonIngore</span></span><br><span class="line"><span class="keyword">public</span> String getUserName&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.username;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="json与bean之间字段转换"><a href="#json与bean之间字段转换" class="headerlink" title="json与bean之间字段转换"></a>json与bean之间字段转换</h3><p>@JsonProperty<br>json里的字段采用下划线格式，bean里的字段采用驼峰</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonProperty</span>(<span class="string">"user_name"</span>)</span><br><span class="line"><span class="keyword">private</span> String userName;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Configuration&quot;&gt;&lt;a href=&quot;#Configuration&quot; class=&quot;headerlink&quot; title=&quot;@Configuration&quot;&gt;&lt;/a&gt;@Configuration&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;一句话概括就是 @Co
      
    
    </summary>
    
    
      <category term="注解" scheme="https://liaoguanwang.github.io/categories/%E6%B3%A8%E8%A7%A3/"/>
    
    
      <category term="Spring" scheme="https://liaoguanwang.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot配置文件</title>
    <link href="https://liaoguanwang.github.io/Frame-SpringBoot-SpringBoot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>https://liaoguanwang.github.io/Frame-SpringBoot-SpringBoot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</id>
    <published>2019-08-28T15:50:45.000Z</published>
    <updated>2020-03-08T11:35:49.028Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-CharacterEncodingFilter编码配置"><a href="#1-CharacterEncodingFilter编码配置" class="headerlink" title="1. CharacterEncodingFilter编码配置"></a>1. CharacterEncodingFilter编码配置</h2><p>spring web项目中需要在添加CharacterEncodingFilter<br>springboot中只需要在配置文件中添加以下配置</p><h3 id="1-1-application-properties"><a href="#1-1-application-properties" class="headerlink" title="1.1 application.properties"></a>1.1 application.properties</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring.http.encoding.charset=UTF-8</span><br><span class="line">spring.http.encoding.enabled=true </span><br><span class="line">spring.http.encoding.force=true</span><br></pre></td></tr></table></figure></div><h3 id="1-2-application-yml"><a href="#1-2-application-yml" class="headerlink" title="1.2 application.yml"></a>1.2 application.yml</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">    http:</span></span><br><span class="line"><span class="attr">        encoding:</span></span><br><span class="line"><span class="attr">            charset:</span> <span class="string">UTF-8</span></span><br><span class="line"><span class="attr">            enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">            force:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">    tomcat:</span></span><br><span class="line"><span class="attr">        uri-encoding:</span> <span class="string">UTF-8</span></span><br></pre></td></tr></table></figure></div><p>参考springboot官方文档:<br><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html</a></p><h2 id="2-HTTP-encoding-HttpEncodingProperties"><a href="#2-HTTP-encoding-HttpEncodingProperties" class="headerlink" title="2. HTTP encoding (HttpEncodingProperties)"></a>2. HTTP encoding (HttpEncodingProperties)</h2><p>spring.http.encoding.charset=UTF-8 # Charset of HTTP requests and responses. Added to the “Content-Type” header if not set explicitly.<br>spring.http.encoding.enabled=true # Whether to enable http encoding support.<br>spring.http.encoding.force= # Whether to force the encoding to the configured charset on HTTP requests and responses.<br>spring.http.encoding.force-request= # Whether to force the encoding to the configured charset on HTTP requests. Defaults to true when “force” has not been specified.<br>spring.http.encoding.force-response= # Whether to force the encoding to the configured charset on HTTP responses.<br>spring.http.encoding.mapping= # Locale in which to encode mapping.<br>另外web窗口 tomcat可以配置</p><p>server.tomcat.uri-encoding=UTF-8 # Character encoding to use to decode the URI.</p><p><a href="https://blog.csdn.net/buyaore_wo/article/details/78196701" target="_blank" rel="noopener">https://blog.csdn.net/buyaore_wo/article/details/78196701</a></p><p><a href="https://blog.csdn.net/qq_39654841/article/details/81156695" target="_blank" rel="noopener">https://blog.csdn.net/qq_39654841/article/details/81156695</a></p><br>### 向Spring注册一个自定义的StringHttpMessageConverter用于string转码<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基于Springboot2.0.1.RELEASE</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.simply.zuozuo.interceptor.HandleInterceptorImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.HttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.StringHttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HttpMessageConverter&lt;String&gt; <span class="title">responseBodyConverter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StringHttpMessageConverter(Charset.forName(<span class="string">"UTF-8"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">        converters.add(responseBodyConverter());</span><br><span class="line">        <span class="comment">// 这里必须加上加载默认转换器，不然bug玩死人，并且该bug目前在网络上似乎没有解决方案</span></span><br><span class="line">        <span class="comment">// 百度，谷歌，各大论坛等。你可以试试去掉。</span></span><br><span class="line">        addDefaultHttpMessageConverters(converters);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureContentNegotiation</span><span class="params">(ContentNegotiationConfigurer configurer)</span> </span>&#123;</span><br><span class="line">        configurer.favorPathExtension(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>参考：<a href="https://blog.csdn.net/qq_15071263/article/details/80248805" target="_blank" rel="noopener">向Spring注册一个自定义的StringHttpMessageConverter用于string转码</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-CharacterEncodingFilter编码配置&quot;&gt;&lt;a href=&quot;#1-CharacterEncodingFilter编码配置&quot; class=&quot;headerlink&quot; title=&quot;1. CharacterEncodingFilter编码配置&quot;&gt;&lt;/
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://liaoguanwang.github.io/categories/SpringBoot/"/>
    
    
      <category term="配置" scheme="https://liaoguanwang.github.io/tags/%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Java日志框架</title>
    <link href="https://liaoguanwang.github.io/Java-%E6%97%A5%E5%BF%97-Java%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/"/>
    <id>https://liaoguanwang.github.io/Java-%E6%97%A5%E5%BF%97-Java%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/</id>
    <published>2019-08-26T15:49:20.000Z</published>
    <updated>2020-03-08T11:35:48.966Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-Logback"><a href="#1-Logback" class="headerlink" title="1.Logback"></a>1.Logback</h3><p> 默认情况下springboot是不将日志输出到日志文件中，这里对日志框架的支持有两种配置方式：</p><ul><li>application.properties 或  application.yml （系统层面）</li><li>logback-spring.xml                               （自定义文件方式）</li></ul><p>第一种方式比较简单，可做的事情也比较简单，比如：只能配置日志文件的路径、日志文件的格式等<br>第二种方式比较复杂，比如有如下需求的话:<br>1、区分 info 和 error 日志<br>2、每天产生一个日志文件。</p><p>以下是这两种方式的配置方式</p><h4 id="1、采用application-properties-或-application-yml配置方式"><a href="#1、采用application-properties-或-application-yml配置方式" class="headerlink" title="1、采用application.properties 或 application.yml配置方式"></a>1、采用application.properties 或 application.yml配置方式</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">  pattern:</span></span><br><span class="line"><span class="attr">    console:</span> <span class="string">"%d - %msg%n"</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">/Users/yg/Desktop/sell222/</span>                </span><br><span class="line"><span class="attr">  file:</span> <span class="string">demo.log</span></span><br><span class="line"><span class="attr">  level:</span></span><br><span class="line">    <span class="string">com.imooc.LoggerTest:</span> <span class="string">trace</span></span><br></pre></td></tr></table></figure></div><p>注意：</p><ol><li>若只配置logging.path，那么将会在/Users/yg/Desktop/sell222/文件夹生成一个日志文件为spring.log（ps：该文件名是固定的，不能更改）。如果path路径不存在，会自动创建该文件夹</li><li>若只配置logging.file，那将会在项目的当前路径下生成一个demo.log日志文件。这里可以使用绝对路径如，会自动在e盘下创建文件夹和相应的日志文件。</li><li>logging.path和logging.file同时配置时，只有logging.file生效哦。</li><li>都可以是相对路径或者绝对路径。</li></ol><h4 id="2、采用-logback-spring-xml-配置方式"><a href="#2、采用-logback-spring-xml-配置方式" class="headerlink" title="2、采用 logback-spring.xml  配置方式"></a>2、采用 logback-spring.xml  配置方式</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 彩色日志 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 彩色日志依赖的渲染类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">"clr"</span> <span class="attr">converterClass</span>=<span class="string">"org.springframework.boot.logging.logback.ColorConverter"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">"wex"</span> <span class="attr">converterClass</span>=<span class="string">"org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 彩色日志格式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"CONSOLE_LOG_PATTERN"</span> <span class="attr">value</span>=<span class="string">"%clr(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;)&#123;faint&#125; %clr(%5p) %clr($&#123;PID:- &#125;) [%t]&#123;magenta&#125; %clr(---)&#123;faint&#125; %clr([%15.15t])&#123;faint&#125; %clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; %clr(:)&#123;faint&#125; %m%n%wex"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"FILE_LOG_PATTERN"</span> <span class="attr">value</span>=<span class="string">"%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %5p $&#123;PID:- &#125; --- [%t] %-40.40logger&#123;39&#125; : %m%n%wex"</span>/&gt;</span></span><br><span class="line">     </span><br><span class="line">    <span class="comment">&lt;!--多环境的日志输出--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--根据不同环境（prod:生产环境，test:测试环境，dev:开发环境）来定义不同的日志输出，--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--在 logback-spring.xml中使用 springProfile 节点来定义，方法如下：--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"prod"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_HOME"</span> <span class="attr">value</span>=<span class="string">"/data/dubbo/platform-action/log/"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"stg"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_HOME"</span> <span class="attr">value</span>=<span class="string">"/data/dubbo/platform-action/log/"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_HOME"</span> <span class="attr">value</span>=<span class="string">"/data/dubbo/platform-action/log/"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"pre"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_HOME"</span> <span class="attr">value</span>=<span class="string">"/data/dubbo/platform-action/log/"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--输出到控制台--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"CONSOLE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>utf8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--info 级别的日志--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 按照每天生成日志文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"INFO"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>INFO<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--日志文件输出的文件名--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/info.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">MaxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--日志文件最大的大小--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">triggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">MaxFileSize</span>&gt;</span>10MB<span class="tag">&lt;/<span class="name">MaxFileSize</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">triggeringPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--WARN 级别的日志--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"WARN"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>WARN<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/warn.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">MaxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--ERROR 级别的日志--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"ERROR"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/error.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">MaxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 日志输出级别 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"INFO"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"WARN"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"ERROR"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>注意：</p><ol><li><p>有些人配置文件里面有看到 layout（如下如），比如不要慌，因为encoder 和 layout 在作用上没有本质区别，但是自0.9.19版本之后，极力推荐使用encoder。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"consoleLog"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pattern</span>&gt;</span></span><br><span class="line">            %d - %m%n</span><br><span class="line">        <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li><li><p>什么Spring Boot推荐使用logback-spring.xml来替代logback.xml来配置logback日志的问题分析？<br><a href="https://static.oschina.net/uploads/img/201805/11153235_m6Yg.png" data-fancybox="group" data-caption class="fancybox"><img src="https://static.oschina.net/uploads/img/201805/11153235_m6Yg.png" alt title></a></p></li></ol><p>即，logback.xml加载早于application.properties，所以如果你在logback.xml使用了变量时，而恰好这个变量是写在application.properties时，那么就会获取不到，只要改成logback-spring.xml就可以解决。</p><ol start="3"><li><p>idea中可以通过 command+o 查看某个类名，比如本例中我要查找系统的日志级别，<br><a href="https://static.oschina.net/uploads/space/2018/0511/145249_QOnl_914271.png" data-fancybox="group" data-caption class="fancybox"><img src="https://static.oschina.net/uploads/space/2018/0511/145249_QOnl_914271.png" alt title></a></p></li><li><p>上面用到了过滤器 Filter，执行一个过滤器会有返回个枚举值，即DENY，NEUTRAL，ACCEPT其中之一。具体用法可以见<a href="https://blog.csdn.net/haidage/article/details/6794540" data-fancybox="group" data-caption="logback logback.xml常用配置详解（三）" class="fancybox"><img src="https://blog.csdn.net/haidage/article/details/6794540" alt="logback logback.xml常用配置详解（三）" title="logback logback.xml常用配置详解（三）"></a></p></li></ol><p>LevelFilter： 级别过滤器，根据日志级别进行过滤。如果日志级别等于配置级别，过滤器会根据onMath 和 onMismatch接收或拒绝日志。</p><p>ThresholdFilter： 临界值过滤器，过滤掉低于指定临界值的日志。当日志级别等于或高于临界值时，过滤器返回NEUTRAL；当日志级别低于临界值时，日志会被拒绝。</p><p>参考：<a href="https://my.oschina.net/360yg/blog/1810625" target="_blank" rel="noopener">Spring boot 日志框架Logback的使用以及配置详解</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-Logback&quot;&gt;&lt;a href=&quot;#1-Logback&quot; class=&quot;headerlink&quot; title=&quot;1.Logback&quot;&gt;&lt;/a&gt;1.Logback&lt;/h3&gt;&lt;p&gt; 默认情况下springboot是不将日志输出到日志文件中，这里对日志框架的支持有两
      
    
    </summary>
    
    
      <category term="Java" scheme="https://liaoguanwang.github.io/categories/Java/"/>
    
    
      <category term="日志" scheme="https://liaoguanwang.github.io/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://liaoguanwang.github.io/Java-%E6%AD%A3%E5%88%99-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://liaoguanwang.github.io/Java-%E6%AD%A3%E5%88%99-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2019-08-26T15:48:35.000Z</published>
    <updated>2020-03-08T11:35:48.970Z</updated>
    
    <content type="html"><![CDATA[<h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><table><thead><tr><th>代码</th><th>说明</th></tr></thead><tbody><tr><td>.</td><td>匹配除换行符以外的所有字符</td></tr><tr><td>\w</td><td>匹配字母或数字或下划线或汉字</td></tr><tr><td>\s</td><td>匹配任意的空白符</td></tr><tr><td>\d</td><td>匹配数字</td></tr><tr><td>^</td><td>匹配字符串的开始</td></tr><tr><td>$</td><td>匹配字符串的结束</td></tr></tbody></table><br><h3 id="字符转义"><a href="#字符转义" class="headerlink" title="字符转义"></a>字符转义</h3><p>如果想查找元字符本身，需要用到\取消这些字符的特殊意义。比如，你要查找.或者$，应该使用.或者$。当然，要查找\本身，你也得用\。</p><br><h3 id="重复"><a href="#重复" class="headerlink" title="重复"></a>重复</h3><table><thead><tr><th>代码/语法</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>零次或更多次</td></tr><tr><td>+</td><td>一次或更多次</td></tr><tr><td>?</td><td>零次或一次</td></tr><tr><td>{n}</td><td>重复n次</td></tr><tr><td>{n,}</td><td>重复n次或更多次</td></tr><tr><td>{n,m}</td><td>重复n次到m次</td></tr></tbody></table><br><h3 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h3><p>[aeiou]<br>匹配任何一个英文元音字母</p><p>[.?!]<br>匹配标点符号（.或?或!）</p><p>[0-9]<br>代表的含义与\d就是完全一致的</p><p>[a-z0-9A-Z]<br>完全等同于\w</p><br><h3 id="分枝条件"><a href="#分枝条件" class="headerlink" title="分枝条件"></a>分枝条件</h3><p>正则表达式里的分枝条件指的是几种规则，如果满足其中任意一种规则都应该当成匹配，具体方法是用|把不用的规则分隔开。注意，使用分枝条件时，要注意各个条件的顺序。</p><p>例子：0\d{2}-\d{8}|0\d{3}-\d{7}这个表达式能匹配两种以连字号分隔的电话号码：一种是三位区号，8位本地号(如010-12345678)，一种是4位区号，7位本地号(0376-2233445)。</p><br><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p>重复单个字符（直接在字符后面加上限定符就行了）；重复多个字符，可以用小括号来指定子表达式（也叫做分组），然后你就可以指定这个子表达式的重复次数了。</p><p>例如：<br>({\d{1,3}.}){3}\d{1,3}是个一个简单的IP地址匹配表达式。要理解这个表达式，请按下列顺序分析它：\d{1,3}匹配1到3位的数字，(\d{1,3}.){3}匹配三位数字加上一个英文句号(这个整体也就是这个分组)重复3次，最后再加上一个一到三位的数字(\d{1,3})。</p><p>不幸的是，它也将匹配256.300.888.999这种不可能存在的IP地址。如果能使用算术比较的话，或许能简单地解决这个问题，但是正则表达式中并不提供关于数学的任何功能，所以只能使用冗长的分组，选择，字符类来描述一个正确的IP地址：((2[0-4]\d|25[0-5]|[01]?\d\d?).){3}(2[0-4]\d|25[0-5]|[01]?\d\d?)。</p><p>理解这个表达式的关键是理解2[0-4]\d|25[0-5]|[01]?\d\d?，这里我就不细说了，你自己应该能分析得出来它的意义。</p><br><h3 id="反义"><a href="#反义" class="headerlink" title="反义"></a>反义</h3><table><thead><tr><th>代码/语法</th><th>说明</th></tr></thead><tbody><tr><td>\W</td><td>匹配任意不是字母，数字，下划线，汉字的字符</td></tr><tr><td>\S</td><td>匹配任意不是空白符的字符</td></tr><tr><td>\D</td><td>匹配任意非数字的字符</td></tr><tr><td>\B</td><td>匹配不是单词开头或结束的位置</td></tr><tr><td>[^x]</td><td>匹配除了x以外的任意字符</td></tr><tr><td>[^aeiou]</td><td>匹配除了aeiou这几个字母以外的任意字母</td></tr></tbody></table><br><h3 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h3><p>使用小括号的时候，还有很多特定用途的语法。下面列出了最常用的一些：</p><p>表4.常用分组语法</p><table><thead><tr><th>分类</th><th>代码/语法</th><th>说明</th></tr></thead><tbody><tr><td>捕获</td><td>(exp)</td><td>匹配exp，并捕获到文本到自动命名的组里</td></tr><tr><td>同上</td><td>(?<name>exp)</name></td><td>匹配exp，并捕获文本到名称为name的组里，也可以写成（?’name’exp）</td></tr><tr><td>同上</td><td>(?:exp)</td><td>匹配exp，不捕获匹配的文本，也不给次分组分配租号</td></tr><tr><td>零宽断言</td><td>(?=exp)</td><td>匹配exp前面的位置</td></tr><tr><td>同上</td><td>(?&lt;=exp)</td><td>匹配exp后面的位置</td></tr><tr><td>同上</td><td>(?!exp)</td><td>匹配后面跟的不是exp的位置</td></tr><tr><td>同上</td><td>(?&lt;!exp)</td><td>匹配前面不是exp的位置</td></tr><tr><td>注释</td><td>(?#comment)</td><td>这种类型的分组不对正则表达式的处理产生任何影响，用于提供注释让人阅读</td></tr></tbody></table><br><h3 id="零宽断言"><a href="#零宽断言" class="headerlink" title="零宽断言"></a>零宽断言</h3><p>下面四个用于查找在某些内容（但并不包括这些内容）之前或之后的东西，也就是说它们像\b，^，$那样用于指定一个位置，这个位置应该满足一定的条件（即断言），因此它们也被称为零宽断言。</p><p>断言用来声明一个应该为真的事实。正则表达只有当断言为真时才会继续进行匹配。</p><br><h3 id="负向零宽断言（有点复杂）"><a href="#负向零宽断言（有点复杂）" class="headerlink" title="负向零宽断言（有点复杂）"></a>负向零宽断言（有点复杂）</h3><p>前面我们提到过怎么查找不是某个字符或不在某个字符类里的字符的方法(反义)。但是如果我们只是想要确保某个字符没有出现，但并不想去匹配它时怎么办？例如，如果我们想查找这样的单词–它里面出现了字母q,但是q后面跟的不是字母u,我们可以尝试这样：</p><p>\b\w<em>q[^u]\w</em>\b匹配包含后面不是字母u的字母q的单词。但是如果多做测试(或者你思维足够敏锐，直接就观察出来了)，你会发现，如果q出现在单词的结尾的话，像Iraq,Benq，这个表达式就会出错。这是因为[^u]总要匹配一个字符，所以如果q是单词的最后一个字符的话，后面的[^u]将会匹配q后面的单词分隔符(可能是空格，或者是句号或其它的什么)，后面的\w<em>\b将会匹配下一个单词，于是\b\w</em>q[^u]\w<em>\b就能匹配整个Iraq fighting。负向零宽断言能解决这样的问题，因为它只匹配一个位置，并不消费任何字符。现在，我们可以这样来解决这个问题：\b\w</em>q(?!u)\w*\b。</p><p>零宽度负预测先行断言(?!exp)，断言此位置的后面不能匹配表达式exp。例如：\d{3}(?!\d)匹配三位数字，而且这三位数字的后面不能是数字；\b((?!abc)\w)+\b匹配不包含连续字符串abc的单词。</p><p>同理，我们可以用(?&lt;!exp),零宽度负回顾后发断言来断言此位置的前面不能匹配表达式exp：(?&lt;![a-z])\d{7}匹配前面不是小写字母的七位数字。</p><p>请详细分析表达式(?&lt;=&lt;(\w+)&gt;).*(?=&lt;/\1&gt;)，这个表达式最能表现零宽断言的真正用途。</p><p>一个更复杂的例子：(?&lt;=&lt;(\w+)&gt;).<em>(?=&lt;/\1&gt;)匹配不包含属性的简单HTML标签内里的内容。(?&lt;=&lt;(\w+)&gt;)指定了这样的前缀：被尖括号括起来的单词(比如可能是&lt;b&gt;)，然后是.</em>(任意的字符串),最后是一个后缀(?=&lt;/\1&gt;)。注意后缀里的/，它用到了前面提过的字符转义；\1则是一个反向引用，引用的正是捕获的第一组，前面的(\w+)匹配的内容，这样如果前缀实际上是&lt;b&gt;的话，后缀就是&lt;/b&gt;了。整个表达式匹配的是&lt;b&gt;和&lt;/b&gt;之间的内容(再次提醒，不包括前缀和后缀本身)。</p><br><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>小括号的另一种用途是通过语法(?#comment)来包含注释。例如：2[0-4]\d(?#200-249)|25<a href="?#250-255">0-5</a>|[01]?\d\d?(?#0-199)。</p><p>要包含注释的话，最好是启用“忽略模式里的空白符”选项，这样在编写表达式时能任意的添加空格，Tab，换行，而实际使用时这些都将被忽略。启用这个选项后，在#后面到这一行结束的所有文本都将被当成注释忽略掉。例如，我们可以前面的一个表达式写成这样：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(?&lt;=         # 断言要匹配的文本的前提</span><br><span class="line">&lt;(\w+)&gt;      # 查找尖括号括起来的字母或数字（即HTML/XML标签）</span><br><span class="line">)            # 前缀结束</span><br><span class="line">.*           # 匹配任意文本</span><br><span class="line">(?=          # 断言要匹配的文本的后缀</span><br><span class="line">&lt;\/\1&gt;       # 查找尖括号括起来的内容：前面是一个&quot;/&quot;，后面是先前捕获的标签</span><br><span class="line">)            # 后缀结束</span><br></pre></td></tr></table></figure></div><br><h3 id="贪婪与懒惰"><a href="#贪婪与懒惰" class="headerlink" title="贪婪与懒惰"></a>贪婪与懒惰</h3><p>表5.懒惰限定符</p><table><thead><tr><th>代码/语法</th><th>说明</th></tr></thead><tbody><tr><td>*?</td><td>重复任意次，但尽可能少重复</td></tr><tr><td>+?</td><td>重复1次或更多次，但尽可能少重复</td></tr><tr><td>??</td><td>重复0次或1次，但尽可能少重复</td></tr><tr><td>{n,m}?</td><td>重复n都m次，但尽可能少重复</td></tr><tr><td>{n,}?</td><td>重复n次以上，但尽可能少重复</td></tr></tbody></table><br><h3 id="处理选项"><a href="#处理选项" class="headerlink" title="处理选项"></a>处理选项</h3><p>略</p><br><h3 id="平衡组-递归匹配"><a href="#平衡组-递归匹配" class="headerlink" title="平衡组/递归匹配"></a>平衡组/递归匹配</h3><p>摘选的文章里的平衡组语法是由.Net Framework支持的；其他语言/库不一定支持这种功能，或者支持此功能但需要使用不同的语法。</p><br><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>下面是一些未提到的元素的列表，包含语法和简单的说明。</p><p>表7.尚未详细讨论的语法</p><table><thead><tr><th>代码/语法</th><th>说明</th></tr></thead><tbody><tr><td>\a</td><td>报警字符(打印它的效果是电脑嘀一声)</td></tr><tr><td>\b</td><td>通常是单词分界位置，但如果在字符类里使用代表退格</td></tr><tr><td>\t</td><td>制表符，Tab</td></tr><tr><td>\r</td><td>回车</td></tr><tr><td>\v</td><td>竖向制表符</td></tr><tr><td>\f</td><td>换页符</td></tr><tr><td>\n</td><td>换行符</td></tr><tr><td>\e</td><td>Escape</td></tr><tr><td>\0nn</td><td>ASCII代码中八进制代码为nn的字符</td></tr><tr><td>\xnn</td><td>ASCII代码中十六进制代码为nn的字符</td></tr><tr><td>\unnnn</td><td>Unicode代码中十六进制代码为nnnn的字符</td></tr><tr><td>\cN</td><td>ASCII控制字符。比如\cC代表Ctrl+C</td></tr><tr><td>\A</td><td>字符串开头(类似^，但不受处理多行选项的影响)</td></tr><tr><td>\Z</td><td>字符串结尾或行尾(不受处理多行选项的影响)</td></tr><tr><td>\z</td><td>字符串结尾(类似$，但不受处理多行选项的影响)</td></tr><tr><td>\G</td><td>当前搜索的开头</td></tr><tr><td>\p{name}</td><td>Unicode中命名为name的字符类，例如\p{IsGreek}</td></tr><tr><td>(?&gt;exp)</td><td>贪婪子表达式</td></tr><tr><td>(?&lt;x&gt;-&lt;y&gt;exp)</td><td>平衡组</td></tr><tr><td>(?im-nsx:exp)</td><td>在子表达式exp中改变处理选项</td></tr><tr><td>(?im-nsx)</td><td>为表达式后面的部分改变处理选项</td></tr><tr><td>(?(exp)yes</td><td>no)</td></tr><tr><td>(?(exp)yes)</td><td>同上，只是使用空表达式作为no</td></tr><tr><td>(?(name)yes</td><td>no)</td></tr><tr><td>(?(name)yes)</td><td>同上，只是使用空表达式作为no</td></tr></tbody></table><p>参考：<br><a href="https://www.imooc.com/article/27790" target="_blank" rel="noopener">让你快速掌握正则表达式</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;元字符&quot;&gt;&lt;a href=&quot;#元字符&quot; class=&quot;headerlink&quot; title=&quot;元字符&quot;&gt;&lt;/a&gt;元字符&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;代码&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;t
      
    
    </summary>
    
    
      <category term="Java" scheme="https://liaoguanwang.github.io/categories/Java/"/>
    
    
      <category term="正则" scheme="https://liaoguanwang.github.io/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
</feed>
